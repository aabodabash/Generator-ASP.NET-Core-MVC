// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorRoleAdminController.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class GeneratorRoleAdminController : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 2 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorRoleAdminController.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using ");
            
            #line 12 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorRoleAdminController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models;\r\n\r\nnamespace ");
            
            #line 14 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorRoleAdminController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Controllers\r\n{\r\n    [Authorize]\r\n    public partial class GeneratorRoleA" +
                    "dminController : Controller\r\n    {\r\n        private readonly UserManager<Applica" +
                    "tionUser> _userManager;\r\n        private readonly RoleManager<IdentityRole> _rol" +
                    "eManager;\r\n        \r\n        public GeneratorRoleAdminController(\r\n            U" +
                    "serManager<ApplicationUser> userManager,\r\n            RoleManager<IdentityRole> " +
                    "roleManager)\r\n        {\r\n            _userManager = userManager;\r\n            _r" +
                    "oleManager = roleManager;\r\n        }\r\n\r\n        public ActionResult Index()\r\n   " +
                    "     {\r\n            return View(this._roleManager.Roles);\r\n        }\r\n\r\n        " +
                    "// GET: /Generator/Details/5\r\n        public async Task<ActionResult> Details(st" +
                    "ring id)\r\n        {\r\n            if (id == null)\r\n            {\r\n               " +
                    " return new StatusCodeResult((int)HttpStatusCode.BadRequest);\r\n            }\r\n\r\n" +
                    "            var role = await _roleManager.FindByIdAsync(id);\r\n\r\n            // G" +
                    "et the list of Users in this Role\r\n            var users = new List<ApplicationU" +
                    "ser>();\r\n            \r\n            // Get the list of Users in this Role\r\n      " +
                    "      foreach (var user in _userManager.Users.ToList())\r\n            {\r\n        " +
                    "        if (await _userManager.IsInRoleAsync(\r\n                    user,\r\n      " +
                    "              role.Name))\r\n                {\r\n                    users.Add(user" +
                    ");\r\n                }\r\n            }\r\n            \r\n            ViewBag.Users = " +
                    "users;\r\n            ViewBag.UserCount = users.Count();\r\n\r\n            return Vie" +
                    "w(role);\r\n        }\r\n\r\n        // GET: /Generator/Create\r\n        public ActionR" +
                    "esult Create()\r\n        {\r\n            return View();\r\n        }\r\n\r\n        // P" +
                    "OST: /Generator/Create\r\n        [HttpPost]\r\n        public async Task<IActionRes" +
                    "ult> Create(RoleViewModel roleViewModel)\r\n        {\r\n            if (ModelState." +
                    "IsValid)\r\n            {\r\n                var role = new IdentityRole(roleViewMod" +
                    "el.Name);\r\n                var roleresult = await _roleManager.CreateAsync(role)" +
                    ";\r\n\r\n                if (!roleresult.Succeeded)\r\n                {\r\n            " +
                    "        ModelState.AddModelError(\r\n                        \"\",\r\n                " +
                    "        roleresult.Errors.First().Description);\r\n\r\n                    return Vi" +
                    "ew();\r\n                }\r\n\r\n                return RedirectToAction(\"Index\");\r\n " +
                    "           }\r\n\r\n            return View();\r\n        }\r\n\r\n        // GET: /Genera" +
                    "tor/Edit/Admin\r\n        public async Task<IActionResult> Edit(string id)\r\n      " +
                    "  {\r\n            if (id == null)\r\n            {\r\n                return new Stat" +
                    "usCodeResult((int)HttpStatusCode.BadRequest);\r\n            }\r\n\r\n            var " +
                    "role = await _roleManager.FindByIdAsync(id);\r\n\r\n            if (role == null)\r\n " +
                    "           {\r\n                return NotFound();\r\n            }\r\n\r\n            R" +
                    "oleViewModel roleModel = new RoleViewModel\r\n            {\r\n                Id = " +
                    "role.Id,\r\n                Name = role.Name\r\n            };\r\n\r\n            return" +
                    " View(roleModel);\r\n        }\r\n\r\n        // POST: /Generator/Edit/5\r\n        [Htt" +
                    "pPost]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionRes" +
                    "ult> Edit([Bind(\"Name,Id\")] RoleViewModel roleModel)\r\n        {\r\n            if " +
                    "(ModelState.IsValid)\r\n            {\r\n                var role = await _roleManag" +
                    "er.FindByIdAsync(roleModel.Id);\r\n                role.Name = roleModel.Name;\r\n\r\n" +
                    "                await _roleManager.UpdateAsync(role);\r\n\r\n                return " +
                    "RedirectToAction(\"Index\");\r\n            }\r\n\r\n            return View();\r\n       " +
                    " }\r\n\r\n        // GET: /Generator/Delete/5\r\n        public async Task <IActionRes" +
                    "ult> Delete(string id)\r\n        {\r\n            if (id == null)\r\n            {\r\n " +
                    "               return new StatusCodeResult((int)HttpStatusCode.BadRequest);\r\n   " +
                    "         }\r\n\r\n            var role = await _roleManager.FindByIdAsync(id);\r\n\r\n  " +
                    "          if (role == null)\r\n            {\r\n                return NotFound();\r\n" +
                    "            }\r\n\r\n            return View(role);\r\n        }\r\n\r\n        // POST: /" +
                    "Generator/Delete/5\r\n        [HttpPost, ActionName(\"Delete\")]\r\n        [ValidateA" +
                    "ntiForgeryToken]\r\n        public async Task<IActionResult> DeleteConfirmed(\r\n   " +
                    "         string id,\r\n            string deleteUser)\r\n        {\r\n            if (" +
                    "ModelState.IsValid)\r\n            {\r\n                if (id == null)\r\n           " +
                    "     {\r\n                    return new StatusCodeResult((int)HttpStatusCode.BadR" +
                    "equest);\r\n                }\r\n\r\n                var role = await _roleManager.Fin" +
                    "dByIdAsync(id);\r\n\r\n                if (role == null)\r\n                {\r\n       " +
                    "             return NotFound();\r\n                }\r\n                \r\n          " +
                    "      if (Security.Roles.GetAll().Any(r =>\r\n                    role.Name.Equals" +
                    "(\r\n                        r.Key,\r\n                        StringComparison.Ordi" +
                    "nalIgnoreCase)))\r\n                {\r\n                    ModelState.AddModelErro" +
                    "r(\r\n                        \"\",\r\n                        new ArgumentException(\"" +
                    "cant_delete_default_role\"),\r\n                        null);\r\n\r\n                 " +
                    "   return View();\r\n                }\r\n\r\n                IdentityResult result;\r\n" +
                    "\r\n                if (deleteUser != null)\r\n                {\r\n                  " +
                    "  result = await _roleManager.DeleteAsync(role);\r\n                }\r\n           " +
                    "     else\r\n                {\r\n                    result = await _roleManager.De" +
                    "leteAsync(role);\r\n                }\r\n\r\n                if (!result.Succeeded)\r\n " +
                    "               {\r\n                    ModelState.AddModelError(\r\n               " +
                    "         \"\",\r\n                        result.Errors.First().Description);\r\n\r\n   " +
                    "                 return View();\r\n                }\r\n\r\n                return Red" +
                    "irectToAction(\"Index\");\r\n            }\r\n\r\n            return View();\r\n        }\r" +
                    "\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
