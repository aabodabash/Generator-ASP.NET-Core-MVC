// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 15.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Foundation.Jade.Extensions;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Common\Templates\Controllers\AccountController.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class AccountController : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            
            #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Common\Templates\Controllers\AccountController.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using ");
            
            #line 14 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Common\Templates\Controllers\AccountController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models;\r\nusing ");
            
            #line 15 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Common\Templates\Controllers\AccountController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Helpers;\r\nusing ");
            
            #line 16 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Common\Templates\Controllers\AccountController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Infrastructure.Services;\r\n\r\nnamespace ");
            
            #line 18 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Common\Templates\Controllers\AccountController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Controllers\r\n{\r\n    [Authorize]\r\n    public class AccountController : Co" +
                    "ntroller\r\n    {\r\n        private readonly UserManager<ApplicationUser> _userMana" +
                    "ger;\r\n        private readonly SignInManager<ApplicationUser> _signInManager;\r\n " +
                    "       private readonly IEmailSender _emailSender;\r\n        private readonly ISm" +
                    "sSender _smsSender;\r\n        private readonly ILogger _logger;\r\n\r\n        public" +
                    " AccountController(\r\n            UserManager<ApplicationUser> userManager,\r\n    " +
                    "        SignInManager<ApplicationUser> signInManager,\r\n            IEmailSender " +
                    "emailSender,\r\n            ISmsSender smsSender,\r\n            ILoggerFactory logg" +
                    "erFactory)\r\n        {\r\n            _userManager = userManager;\r\n            _sig" +
                    "nInManager = signInManager;\r\n            _emailSender = emailSender;\r\n          " +
                    "  _smsSender = smsSender;\r\n            _logger = loggerFactory.CreateLogger<Acco" +
                    "untController>();\r\n        }\r\n\r\n        //\r\n        // GET: /Account/Login\r\n    " +
                    "    [HttpGet]\r\n        [AllowAnonymous]\r\n        public async Task<IActionResult" +
                    "> Login(string returnUrl = null)\r\n        {\r\n            // Clear the existing e" +
                    "xternal cookie to ensure a clean login process\r\n            await HttpContext.Si" +
                    "gnOutAsync(IdentityConstants.ExternalScheme);\r\n\r\n            ViewData[\"ReturnUrl" +
                    "\"] = returnUrl;\r\n            return View();\r\n        }\r\n\r\n        //\r\n        //" +
                    " POST: /Account/Login\r\n        [HttpPost]\r\n        [AllowAnonymous]\r\n        [Va" +
                    "lidateAntiForgeryToken]\r\n        public async Task<IActionResult> Login(LoginVie" +
                    "wModel model, string returnUrl = null)\r\n        {\r\n            ViewData[\"ReturnU" +
                    "rl\"] = returnUrl;\r\n            if (ModelState.IsValid)\r\n            {\r\n         " +
                    "       // This doesn\'t count login failures towards account lockout\r\n           " +
                    "     // To enable password failures to trigger account lockout, set lockoutOnFai" +
                    "lure: true\r\n                var result = await _signInManager.PasswordSignInAsyn" +
                    "c(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false);\r\n    " +
                    "            if (result.Succeeded)\r\n                {\r\n                    _logge" +
                    "r.LogInformation(1, \"User logged in.\");\r\n                    return RedirectToLo" +
                    "cal(returnUrl);\r\n                }\r\n                if (result.RequiresTwoFactor" +
                    ")\r\n                {\r\n                    return RedirectToAction(nameof(SendCod" +
                    "e), new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });\r\n            " +
                    "    }\r\n                if (result.IsLockedOut)\r\n                {\r\n             " +
                    "       _logger.LogWarning(2, \"User account locked out.\");\r\n                    r" +
                    "eturn View(\"Lockout\");\r\n                }\r\n                else\r\n               " +
                    " {\r\n                    ModelState.AddModelError(string.Empty, \"Invalid login at" +
                    "tempt.\");\r\n                    return View(model);\r\n                }\r\n         " +
                    "   }\r\n\r\n            // If we got this far, something failed, redisplay form\r\n   " +
                    "         return View(model);\r\n        }\r\n\r\n        //\r\n        // GET: /Account/" +
                    "Register\r\n        [HttpGet]\r\n        [AllowAnonymous]\r\n        public IActionRes" +
                    "ult Register(string returnUrl = null)\r\n        {\r\n            ViewData[\"ReturnUr" +
                    "l\"] = returnUrl;\r\n            return View();\r\n        }\r\n\r\n        //\r\n        /" +
                    "/ POST: /Account/Register\r\n        [HttpPost]\r\n        [AllowAnonymous]\r\n       " +
                    " [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Register(R" +
                    "egisterViewModel model, string returnUrl = null)\r\n        {\r\n            ViewDat" +
                    "a[\"ReturnUrl\"] = returnUrl;\r\n            if (ModelState.IsValid)\r\n            {\r" +
                    "\n                var user = new ApplicationUser { UserName = model.Email, Email " +
                    "= model.Email };\r\n                var result = await _userManager.CreateAsync(us" +
                    "er, model.Password);\r\n\r\n                if (result.Succeeded)\r\n                {" +
                    "\r\n                    // For more information on how to enable account confirmat" +
                    "ion and password reset please visit https://go.microsoft.com/fwlink/?LinkID=5327" +
                    "13\r\n                    // Send an email with this link\r\n                    //v" +
                    "ar code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\r\n       " +
                    "             //var callbackUrl = Url.Action(nameof(ConfirmEmail), \"Account\", new" +
                    " { userId = user.Id, code = code }, protocol: HttpContext.Request.Scheme);\r\n    " +
                    "                //await _emailSender.SendEmailAsync(model.Email, \"Confirm your a" +
                    "ccount\",\r\n                    //    $\"Please confirm your account by clicking th" +
                    "is link: <a href=\'{callbackUrl}\'>link</a>\");\r\n                    await _signInM" +
                    "anager.SignInAsync(user, isPersistent: false);\r\n                    _logger.LogI" +
                    "nformation(3, \"User created a new account with password.\");\r\n                   " +
                    " return RedirectToLocal(returnUrl);\r\n                }\r\n                AddError" +
                    "s(result);\r\n            }\r\n\r\n            // If we got this far, something failed" +
                    ", redisplay form\r\n            return View(model);\r\n        }\r\n\r\n\t\t// POST api/ac" +
                    "counts\r\n        [HttpPost]\r\n        public async Task<IActionResult> Post([FromB" +
                    "ody]RegisterViewModel model)\r\n        {\r\n            if (!ModelState.IsValid)\r\n " +
                    "           {\r\n                return BadRequest(ModelState);\r\n            }\r\n\r\n " +
                    "           var userIdentity = new ApplicationUser { UserName = model.Email, Emai" +
                    "l = model.Email };\r\n\r\n            var result = await _userManager.CreateAsync(us" +
                    "erIdentity, model.Password);\r\n\r\n            if (!result.Succeeded) return new Ba" +
                    "dRequestObjectResult(Errors.AddErrorsToModelState(result, ModelState));\r\n\r\n     " +
                    "       return new OkObjectResult(\"Account created\");\r\n        }\r\n\r\n\r\n        //\r" +
                    "\n        // POST: /Account/Logout\r\n        [HttpPost]\r\n        [ValidateAntiForg" +
                    "eryToken]\r\n        public async Task<IActionResult> Logout()\r\n        {\r\n       " +
                    "     await _signInManager.SignOutAsync();\r\n            _logger.LogInformation(4," +
                    " \"User logged out.\");\r\n            return RedirectToAction(nameof(HomeController" +
                    ".Index), \"Home\");\r\n        }\r\n\r\n        //\r\n        // POST: /Account/ExternalLo" +
                    "gin\r\n        [HttpPost]\r\n        [AllowAnonymous]\r\n        [ValidateAntiForgeryT" +
                    "oken]\r\n        public IActionResult ExternalLogin(string provider, string return" +
                    "Url = null)\r\n        {\r\n            // Request a redirect to the external login " +
                    "provider.\r\n            var redirectUrl = Url.Action(nameof(ExternalLoginCallback" +
                    "), \"Account\", new { ReturnUrl = returnUrl });\r\n            var properties = _sig" +
                    "nInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);\r\n  " +
                    "          return Challenge(properties, provider);\r\n        }\r\n\r\n        //\r\n    " +
                    "    // GET: /Account/ExternalLoginCallback\r\n        [HttpGet]\r\n        [AllowAno" +
                    "nymous]\r\n        public async Task<IActionResult> ExternalLoginCallback(string r" +
                    "eturnUrl = null, string remoteError = null)\r\n        {\r\n            if (remoteEr" +
                    "ror != null)\r\n            {\r\n                ModelState.AddModelError(string.Emp" +
                    "ty, $\"Error from external provider: {remoteError}\");\r\n                return Vie" +
                    "w(nameof(Login));\r\n            }\r\n            var info = await _signInManager.Ge" +
                    "tExternalLoginInfoAsync();\r\n            if (info == null)\r\n            {\r\n      " +
                    "          return RedirectToAction(nameof(Login));\r\n            }\r\n\r\n            " +
                    "// Sign in the user with this external login provider if the user already has a " +
                    "login.\r\n            var result = await _signInManager.ExternalLoginSignInAsync(i" +
                    "nfo.LoginProvider, info.ProviderKey, isPersistent: false);\r\n            if (resu" +
                    "lt.Succeeded)\r\n            {\r\n                _logger.LogInformation(5, \"User lo" +
                    "gged in with {Name} provider.\", info.LoginProvider);\r\n                return Red" +
                    "irectToLocal(returnUrl);\r\n            }\r\n            if (result.RequiresTwoFacto" +
                    "r)\r\n            {\r\n                return RedirectToAction(nameof(SendCode), new" +
                    " { ReturnUrl = returnUrl });\r\n            }\r\n            if (result.IsLockedOut)" +
                    "\r\n            {\r\n                return View(\"Lockout\");\r\n            }\r\n       " +
                    "     else\r\n            {\r\n                // If the user does not have an accoun" +
                    "t, then ask the user to create an account.\r\n                ViewData[\"ReturnUrl\"" +
                    "] = returnUrl;\r\n                ViewData[\"LoginProvider\"] = info.LoginProvider;\r" +
                    "\n                var email = info.Principal.FindFirstValue(ClaimTypes.Email);\r\n " +
                    "               return View(\"ExternalLoginConfirmation\", new ExternalLoginConfirm" +
                    "ationViewModel { Email = email });\r\n            }\r\n        }\r\n\r\n        //\r\n    " +
                    "    // POST: /Account/ExternalLoginConfirmation\r\n        [HttpPost]\r\n        [Al" +
                    "lowAnonymous]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IAc" +
                    "tionResult> ExternalLoginConfirmation(ExternalLoginConfirmationViewModel model, " +
                    "string returnUrl = null)\r\n        {\r\n            if (ModelState.IsValid)\r\n      " +
                    "      {\r\n                // Get the information about the user from the external" +
                    " login provider\r\n                var info = await _signInManager.GetExternalLogi" +
                    "nInfoAsync();\r\n                if (info == null)\r\n                {\r\n           " +
                    "         return View(\"ExternalLoginFailure\");\r\n                }\r\n              " +
                    "  var user = new ApplicationUser { UserName = model.Email, Email = model.Email }" +
                    ";\r\n                var result = await _userManager.CreateAsync(user);\r\n         " +
                    "       if (result.Succeeded)\r\n                {\r\n                    result = aw" +
                    "ait _userManager.AddLoginAsync(user, info);\r\n                    if (result.Succ" +
                    "eeded)\r\n                    {\r\n                        await _signInManager.Sign" +
                    "InAsync(user, isPersistent: false);\r\n                        _logger.LogInformat" +
                    "ion(6, \"User created an account using {Name} provider.\", info.LoginProvider);\r\n " +
                    "                       return RedirectToLocal(returnUrl);\r\n                    }" +
                    "\r\n                }\r\n                AddErrors(result);\r\n            }\r\n\r\n      " +
                    "      ViewData[\"ReturnUrl\"] = returnUrl;\r\n            return View(model);\r\n     " +
                    "   }\r\n\r\n        // GET: /Account/ConfirmEmail\r\n        [HttpGet]\r\n        [Allow" +
                    "Anonymous]\r\n        public async Task<IActionResult> ConfirmEmail(string userId," +
                    " string code)\r\n        {\r\n            if (userId == null || code == null)\r\n     " +
                    "       {\r\n                return View(\"Error\");\r\n            }\r\n            var " +
                    "user = await _userManager.FindByIdAsync(userId);\r\n            if (user == null)\r" +
                    "\n            {\r\n                return View(\"Error\");\r\n            }\r\n          " +
                    "  var result = await _userManager.ConfirmEmailAsync(user, code);\r\n            re" +
                    "turn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n        }\r\n\r\n        //" +
                    "\r\n        // GET: /Account/ForgotPassword\r\n        [HttpGet]\r\n        [AllowAnon" +
                    "ymous]\r\n        public IActionResult ForgotPassword()\r\n        {\r\n            re" +
                    "turn View();\r\n        }\r\n\r\n        //\r\n        // POST: /Account/ForgotPassword\r" +
                    "\n        [HttpPost]\r\n        [AllowAnonymous]\r\n        [ValidateAntiForgeryToken" +
                    "]\r\n        public async Task<IActionResult> ForgotPassword(ForgotPasswordViewMod" +
                    "el model)\r\n        {\r\n            if (ModelState.IsValid)\r\n            {\r\n      " +
                    "          var user = await _userManager.FindByEmailAsync(model.Email);\r\n        " +
                    "        if (user == null || !(await _userManager.IsEmailConfirmedAsync(user)))\r\n" +
                    "                {\r\n                    // Don\'t reveal that the user does not ex" +
                    "ist or is not confirmed\r\n                    return View(\"ForgotPasswordConfirma" +
                    "tion\");\r\n                }\r\n\r\n                // For more information on how to " +
                    "enable account confirmation and password reset please visit https://go.microsoft" +
                    ".com/fwlink/?LinkID=532713\r\n                // Send an email with this link\r\n   " +
                    "             //var code = await _userManager.GeneratePasswordResetTokenAsync(use" +
                    "r);\r\n                //var callbackUrl = Url.Action(nameof(ResetPassword), \"Acco" +
                    "unt\", new { userId = user.Id, code = code }, protocol: HttpContext.Request.Schem" +
                    "e);\r\n                //await _emailSender.SendEmailAsync(model.Email, \"Reset Pas" +
                    "sword\",\r\n                //   $\"Please reset your password by clicking here: <a " +
                    "href=\'{callbackUrl}\'>link</a>\");\r\n                //return View(\"ForgotPasswordC" +
                    "onfirmation\");\r\n            }\r\n\r\n            // If we got this far, something fa" +
                    "iled, redisplay form\r\n            return View(model);\r\n        }\r\n\r\n        //\r\n" +
                    "        // GET: /Account/ForgotPasswordConfirmation\r\n        [HttpGet]\r\n        " +
                    "[AllowAnonymous]\r\n        public IActionResult ForgotPasswordConfirmation()\r\n   " +
                    "     {\r\n            return View();\r\n        }\r\n\r\n        //\r\n        // GET: /Ac" +
                    "count/ResetPassword\r\n        [HttpGet]\r\n        [AllowAnonymous]\r\n        public" +
                    " IActionResult ResetPassword(string code = null)\r\n        {\r\n            return " +
                    "code == null ? View(\"Error\") : View();\r\n        }\r\n\r\n        //\r\n        // POST" +
                    ": /Account/ResetPassword\r\n        [HttpPost]\r\n        [AllowAnonymous]\r\n        " +
                    "[ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> ResetPasswo" +
                    "rd(ResetPasswordViewModel model)\r\n        {\r\n            if (!ModelState.IsValid" +
                    ")\r\n            {\r\n                return View(model);\r\n            }\r\n          " +
                    "  var user = await _userManager.FindByEmailAsync(model.Email);\r\n            if (" +
                    "user == null)\r\n            {\r\n                // Don\'t reveal that the user does" +
                    " not exist\r\n                return RedirectToAction(nameof(AccountController.Res" +
                    "etPasswordConfirmation), \"Account\");\r\n            }\r\n            var result = aw" +
                    "ait _userManager.ResetPasswordAsync(user, model.Code, model.Password);\r\n        " +
                    "    if (result.Succeeded)\r\n            {\r\n                return RedirectToActio" +
                    "n(nameof(AccountController.ResetPasswordConfirmation), \"Account\");\r\n            " +
                    "}\r\n            AddErrors(result);\r\n            return View();\r\n        }\r\n\r\n    " +
                    "    //\r\n        // GET: /Account/ResetPasswordConfirmation\r\n        [HttpGet]\r\n " +
                    "       [AllowAnonymous]\r\n        public IActionResult ResetPasswordConfirmation(" +
                    ")\r\n        {\r\n            return View();\r\n        }\r\n\r\n        //\r\n        // GE" +
                    "T: /Account/SendCode\r\n        [HttpGet]\r\n        [AllowAnonymous]\r\n        publi" +
                    "c async Task<ActionResult> SendCode(string returnUrl = null, bool rememberMe = f" +
                    "alse)\r\n        {\r\n            var user = await _signInManager.GetTwoFactorAuthen" +
                    "ticationUserAsync();\r\n            if (user == null)\r\n            {\r\n            " +
                    "    return View(\"Error\");\r\n            }\r\n            var userFactors = await _u" +
                    "serManager.GetValidTwoFactorProvidersAsync(user);\r\n            var factorOptions" +
                    " = userFactors.Select(purpose => new SelectListItem { Text = purpose, Value = pu" +
                    "rpose }).ToList();\r\n            return View(new SendCodeViewModel { Providers = " +
                    "factorOptions, ReturnUrl = returnUrl, RememberMe = rememberMe });\r\n        }\r\n\r\n" +
                    "        //\r\n        // POST: /Account/SendCode\r\n        [HttpPost]\r\n        [All" +
                    "owAnonymous]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IAct" +
                    "ionResult> SendCode(SendCodeViewModel model)\r\n        {\r\n            if (!ModelS" +
                    "tate.IsValid)\r\n            {\r\n                return View();\r\n            }\r\n\r\n " +
                    "           var user = await _signInManager.GetTwoFactorAuthenticationUserAsync()" +
                    ";\r\n            if (user == null)\r\n            {\r\n                return View(\"Er" +
                    "ror\");\r\n            }\r\n\r\n            // Generate the token and send it\r\n        " +
                    "    var code = await _userManager.GenerateTwoFactorTokenAsync(user, model.Select" +
                    "edProvider);\r\n            if (string.IsNullOrWhiteSpace(code))\r\n            {\r\n " +
                    "               return View(\"Error\");\r\n            }\r\n\r\n            var message =" +
                    " \"Your security code is: \" + code;\r\n            if (model.SelectedProvider == \"E" +
                    "mail\")\r\n            {\r\n                await _emailSender.SendEmailAsync(await _" +
                    "userManager.GetEmailAsync(user), \"Security Code\", message);\r\n            }\r\n    " +
                    "        else if (model.SelectedProvider == \"Phone\")\r\n            {\r\n            " +
                    "    await _smsSender.SendSmsAsync(await _userManager.GetPhoneNumberAsync(user), " +
                    "message);\r\n            }\r\n\r\n            return RedirectToAction(nameof(VerifyCod" +
                    "e), new { Provider = model.SelectedProvider, ReturnUrl = model.ReturnUrl, Rememb" +
                    "erMe = model.RememberMe });\r\n        }\r\n\r\n        //\r\n        // GET: /Account/V" +
                    "erifyCode\r\n        [HttpGet]\r\n        [AllowAnonymous]\r\n        public async Tas" +
                    "k<IActionResult> VerifyCode(string provider, bool rememberMe, string returnUrl =" +
                    " null)\r\n        {\r\n            // Require that the user has already logged in vi" +
                    "a username/password or external login\r\n            var user = await _signInManag" +
                    "er.GetTwoFactorAuthenticationUserAsync();\r\n            if (user == null)\r\n      " +
                    "      {\r\n                return View(\"Error\");\r\n            }\r\n            retur" +
                    "n View(new VerifyCodeViewModel { Provider = provider, ReturnUrl = returnUrl, Rem" +
                    "emberMe = rememberMe });\r\n        }\r\n\r\n        //\r\n        // POST: /Account/Ver" +
                    "ifyCode\r\n        [HttpPost]\r\n        [AllowAnonymous]\r\n        [ValidateAntiForg" +
                    "eryToken]\r\n        public async Task<IActionResult> VerifyCode(VerifyCodeViewMod" +
                    "el model)\r\n        {\r\n            if (!ModelState.IsValid)\r\n            {\r\n     " +
                    "           return View(model);\r\n            }\r\n\r\n            // The following co" +
                    "de protects for brute force attacks against the two factor codes.\r\n            /" +
                    "/ If a user enters incorrect codes for a specified amount of time then the user " +
                    "account\r\n            // will be locked out for a specified amount of time.\r\n    " +
                    "        var result = await _signInManager.TwoFactorSignInAsync(model.Provider, m" +
                    "odel.Code, model.RememberMe, model.RememberBrowser);\r\n            if (result.Suc" +
                    "ceeded)\r\n            {\r\n                return RedirectToLocal(model.ReturnUrl);" +
                    "\r\n            }\r\n            if (result.IsLockedOut)\r\n            {\r\n           " +
                    "     _logger.LogWarning(7, \"User account locked out.\");\r\n                return " +
                    "View(\"Lockout\");\r\n            }\r\n            else\r\n            {\r\n              " +
                    "  ModelState.AddModelError(string.Empty, \"Invalid code.\");\r\n                retu" +
                    "rn View(model);\r\n            }\r\n        }\r\n\r\n        //\r\n        // GET /Account" +
                    "/AccessDenied\r\n        [HttpGet]\r\n        public IActionResult AccessDenied()\r\n " +
                    "       {\r\n            return View();\r\n        }\r\n\r\n        #region Helpers\r\n\r\n  " +
                    "      private void AddErrors(IdentityResult result)\r\n        {\r\n            fore" +
                    "ach (var error in result.Errors)\r\n            {\r\n                ModelState.AddM" +
                    "odelError(string.Empty, error.Description);\r\n            }\r\n        }\r\n\r\n       " +
                    " private IActionResult RedirectToLocal(string returnUrl)\r\n        {\r\n           " +
                    " if (Url.IsLocalUrl(returnUrl))\r\n            {\r\n                return Redirect(" +
                    "returnUrl);\r\n            }\r\n            else\r\n            {\r\n                ret" +
                    "urn RedirectToAction(nameof(HomeController.Index), \"Home\");\r\n            }\r\n    " +
                    "    }\r\n\r\n        #endregion\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
