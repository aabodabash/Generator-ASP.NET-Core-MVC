// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorManageController.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class GeneratorManageController : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 2 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorManageController.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ");
            
            #line 11 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorManageController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Services;\r\nusing ");
            
            #line 12 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorManageController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Infrastructure.Services;\r\nusing ");
            
            #line 13 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorManageController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models;\r\n\r\nnamespace ");
            
            #line 15 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Controllers\GeneratorManageController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Controllers\r\n{\r\n    [Authorize]\r\n    public partial class GeneratorManag" +
                    "eController : Controller\r\n    {\r\n        private readonly UserManager<Applicatio" +
                    "nUser> _userManager;\r\n        private readonly SignInManager<ApplicationUser> _s" +
                    "ignInManager;\r\n        private readonly IEmailSender _emailSender;\r\n        priv" +
                    "ate readonly ISmsSender _smsSender;\r\n        private readonly ILogger _logger;\r\n" +
                    "\r\n        public GeneratorManageController(\r\n            UserManager<Application" +
                    "User> userManager,\r\n            SignInManager<ApplicationUser> signInManager,\r\n " +
                    "           IEmailSender emailSender,\r\n            ISmsSender smsSender,\r\n       " +
                    "     ILoggerFactory loggerFactory)\r\n        {\r\n            _userManager = userMa" +
                    "nager;\r\n            _signInManager = signInManager;\r\n            _emailSender = " +
                    "emailSender;\r\n            _smsSender = smsSender;\r\n            _logger = loggerF" +
                    "actory.CreateLogger<GeneratorManageController>();\r\n        }\r\n\r\n        // GET: " +
                    "/GeneratorManage/Index\r\n        [HttpGet]\r\n        public async Task<IActionResu" +
                    "lt> Index(ManageMessageId? message = null)\r\n        {\r\n            ViewData[\"Sta" +
                    "tusMessage\"] =\r\n                message == ManageMessageId.ChangePasswordSuccess" +
                    " ?\r\n                \"Your password has been changed.\" : \r\n                messag" +
                    "e == ManageMessageId.SetPasswordSuccess ?\r\n                \"Your password has be" +
                    "en set.\" :\r\n                message == ManageMessageId.SetTwoFactorSuccess ?\r\n  " +
                    "              \"Your two-factor authentication provider has been set.\" :\r\n       " +
                    "         message == ManageMessageId.Error ?\r\n                \"An error has occur" +
                    "red.\" :\r\n                message == ManageMessageId.AddPhoneSuccess ?\r\n         " +
                    "       \"Your phone number was added.\" :\r\n                message == ManageMessag" +
                    "eId.RemovePhoneSuccess ?\r\n                \"Your phone number was removed.\":\r\n   " +
                    "             \"\";\r\n\r\n            var user = await GetCurrentUserAsync();\r\n\r\n     " +
                    "       if (user == null)\r\n            {\r\n                return View(\"Error\");\r\n" +
                    "            }\r\n\r\n            var model = new IndexViewModel\r\n            {\r\n    " +
                    "            HasPassword = await _userManager.HasPasswordAsync(user),\r\n          " +
                    "      PhoneNumber = await _userManager.GetPhoneNumberAsync(user),\r\n             " +
                    "   TwoFactor = await _userManager.GetTwoFactorEnabledAsync(user),\r\n             " +
                    "   Logins = await _userManager.GetLoginsAsync(user),\r\n                BrowserRem" +
                    "embered = await _signInManager.IsTwoFactorClientRememberedAsync(user)\r\n         " +
                    "   };\r\n\r\n            return View(model);\r\n        }\r\n\r\n        // POST: /Generat" +
                    "orManage/RemoveLogin\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n  " +
                    "      public async Task<IActionResult> RemoveLogin(RemoveLoginViewModel account)" +
                    "\r\n        {\r\n            ManageMessageId? message = ManageMessageId.Error;\r\n\r\n  " +
                    "          var user = await GetCurrentUserAsync();\r\n\r\n            if (user != nul" +
                    "l)\r\n            {\r\n                var result = await _userManager.RemoveLoginAs" +
                    "ync(\r\n                    user,\r\n                    account.LoginProvider,\r\n   " +
                    "                 account.ProviderKey);\r\n\r\n                if (result.Succeeded)\r" +
                    "\n                {\r\n                    await _signInManager.SignInAsync(\r\n     " +
                    "                   user,\r\n                        isPersistent: false);\r\n\r\n     " +
                    "               message = ManageMessageId.RemoveLoginSuccess;\r\n                }\r" +
                    "\n            }\r\n\r\n            return RedirectToAction(\r\n                nameof(M" +
                    "anageLogins),\r\n                new\r\n                {\r\n                    Messa" +
                    "ge = message\r\n                });\r\n        }\r\n\r\n        // GET: /GeneratorManage" +
                    "/AddPhoneNumber\r\n        public IActionResult AddPhoneNumber()\r\n        {\r\n     " +
                    "       return View();\r\n        }\r\n\r\n        // POST: /GeneratorManage/AddPhoneNu" +
                    "mber\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public asy" +
                    "nc Task<IActionResult> AddPhoneNumber(AddPhoneNumberViewModel model)\r\n        {\r" +
                    "\n            if (!ModelState.IsValid)\r\n            {\r\n                return Vie" +
                    "w(model);\r\n            }\r\n\r\n            // Generate the token and send it\r\n     " +
                    "       var user = await GetCurrentUserAsync();\r\n\r\n            if (user == null)\r" +
                    "\n            {\r\n                return View(\"Error\");\r\n            }\r\n\r\n        " +
                    "    var code = await _userManager.GenerateChangePhoneNumberTokenAsync(\r\n        " +
                    "        user,\r\n                model.PhoneNumber);\r\n\r\n            await _smsSend" +
                    "er.SendSmsAsync(\r\n                model.PhoneNumber,\r\n                $\"Your sec" +
                    "urity code is: {code}\");\r\n\r\n            return RedirectToAction(\r\n              " +
                    "  nameof(VerifyPhoneNumber),\r\n                new\r\n                {\r\n          " +
                    "          PhoneNumber = model.PhoneNumber\r\n                });\r\n        }\r\n\r\n   " +
                    "     //\r\n        // POST: /GeneratorManage/EnableTwoFactorAuthentication\r\n      " +
                    "  [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IAct" +
                    "ionResult> EnableTwoFactorAuthentication()\r\n        {\r\n            var user = aw" +
                    "ait GetCurrentUserAsync();\r\n\r\n            if (user != null)\r\n            {\r\n    " +
                    "            await _userManager.SetTwoFactorEnabledAsync(\r\n                    us" +
                    "er,\r\n                    true);\r\n\r\n                await _signInManager.SignInAs" +
                    "ync(\r\n                    user,\r\n                    isPersistent: false);\r\n\r\n  " +
                    "              _logger.LogInformation(\r\n                    1,\r\n                 " +
                    "   \"User enabled two-factor authentication.\");\r\n            }\r\n\r\n            ret" +
                    "urn RedirectToAction(\r\n                nameof(Index),\r\n                \"Generato" +
                    "rManage\");\r\n        }\r\n\r\n        // POST: /GeneratorManage/DisableTwoFactorAuthe" +
                    "ntication\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        publi" +
                    "c async Task<IActionResult> DisableTwoFactorAuthentication()\r\n        {\r\n       " +
                    "     var user = await GetCurrentUserAsync();\r\n\r\n            if (user != null)\r\n " +
                    "           {\r\n                await _userManager.SetTwoFactorEnabledAsync(\r\n    " +
                    "                user,\r\n                    false);\r\n\r\n                await _sig" +
                    "nInManager.SignInAsync(\r\n                    user,\r\n                    isPersis" +
                    "tent: false);\r\n\r\n                _logger.LogInformation(\r\n                    2," +
                    "\r\n                    \"User disabled two-factor authentication.\");\r\n            " +
                    "}\r\n\r\n            return RedirectToAction(\r\n                nameof(Index),\r\n     " +
                    "           \"GeneratorManage\");\r\n        }\r\n\r\n        // GET: /GeneratorManage/Ve" +
                    "rifyPhoneNumber\r\n        [HttpGet]\r\n        public async Task<IActionResult> Ver" +
                    "ifyPhoneNumber(string phoneNumber)\r\n        {\r\n            var user = await GetC" +
                    "urrentUserAsync();\r\n\r\n            if (user == null)\r\n            {\r\n            " +
                    "    return View(\"Error\");\r\n            }\r\n\r\n            var code = await _userMa" +
                    "nager.GenerateChangePhoneNumberTokenAsync(\r\n                user,\r\n             " +
                    "   phoneNumber);\r\n\r\n            // Send an SMS to verify the phone number\r\n     " +
                    "       return phoneNumber == null ?\r\n                View(\"Error\") :\r\n          " +
                    "      View(new VerifyPhoneNumberViewModel\r\n                {\r\n                  " +
                    "  PhoneNumber = phoneNumber\r\n                });\r\n        }\r\n\r\n        // POST: " +
                    "/GeneratorManage/VerifyPhoneNumber\r\n        [HttpPost]\r\n        [ValidateAntiFor" +
                    "geryToken]\r\n        public async Task<IActionResult> VerifyPhoneNumber(VerifyPho" +
                    "neNumberViewModel model)\r\n        {\r\n            if (!ModelState.IsValid)\r\n     " +
                    "       {\r\n                return View(model);\r\n            }\r\n\r\n            var " +
                    "user = await GetCurrentUserAsync();\r\n\r\n            if (user != null)\r\n          " +
                    "  {\r\n                var result = await _userManager.ChangePhoneNumberAsync(\r\n  " +
                    "                  user,\r\n                    model.PhoneNumber, model.Code);\r\n\r\n" +
                    "                if (result.Succeeded)\r\n                {\r\n                    aw" +
                    "ait _signInManager.SignInAsync(\r\n                        user,\r\n                " +
                    "        isPersistent: false);\r\n\r\n                    return RedirectToAction(\r\n " +
                    "                       nameof(Index),\r\n                        new\r\n            " +
                    "            {\r\n                            Message = ManageMessageId.AddPhoneSuc" +
                    "cess\r\n                        });\r\n                }\r\n            }\r\n\r\n         " +
                    "   // If we got this far, something failed, redisplay the form\r\n            Mode" +
                    "lState.AddModelError(\r\n                string.Empty,\r\n                \"Failed to" +
                    " verify phone number\");\r\n\r\n            return View(model);\r\n        }\r\n\r\n       " +
                    " // POST: /GeneratorManage/RemovePhoneNumber\r\n        [HttpPost]\r\n        [Valid" +
                    "ateAntiForgeryToken]\r\n        public async Task<IActionResult> RemovePhoneNumber" +
                    "()\r\n        {\r\n            var user = await GetCurrentUserAsync();\r\n\r\n          " +
                    "  if (user != null)\r\n            {\r\n                var result = await _userMana" +
                    "ger.SetPhoneNumberAsync(\r\n                    user,\r\n                    null);\r" +
                    "\n\r\n                if (result.Succeeded)\r\n                {\r\n                   " +
                    " await _signInManager.SignInAsync(\r\n                        user,\r\n             " +
                    "           isPersistent: false);\r\n\r\n                    return RedirectToAction(" +
                    "\r\n                        nameof(Index),\r\n                        new\r\n         " +
                    "               {\r\n                            Message = ManageMessageId.RemovePh" +
                    "oneSuccess\r\n                        });\r\n                }\r\n            }\r\n     " +
                    "       return RedirectToAction(\r\n                nameof(Index),\r\n               " +
                    " new\r\n                {\r\n                    Message = ManageMessageId.Error\r\n  " +
                    "              });\r\n        }\r\n\r\n        // GET: /GeneratorManage/ChangePassword\r" +
                    "\n        [HttpGet]\r\n        public IActionResult ChangePassword()\r\n        {\r\n  " +
                    "          return View();\r\n        }\r\n\r\n        // POST: /GeneratorManage/ChangeP" +
                    "assword\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public " +
                    "async Task<IActionResult> ChangePassword(ChangePasswordViewModel model)\r\n       " +
                    " {\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return " +
                    "View(model);\r\n            }\r\n\r\n            var user = await GetCurrentUserAsync(" +
                    ");\r\n\r\n            if (user != null)\r\n            {\r\n                var result =" +
                    " await _userManager.ChangePasswordAsync(\r\n                    user,\r\n           " +
                    "         model.OldPassword,\r\n                    model.NewPassword);\r\n\r\n        " +
                    "        if (result.Succeeded)\r\n                {\r\n                    await _sig" +
                    "nInManager.SignInAsync(\r\n                        user,\r\n                        " +
                    "isPersistent: false);\r\n\r\n                    _logger.LogInformation(\r\n          " +
                    "              3,\r\n                        \"User changed their password successfu" +
                    "lly.\");\r\n\r\n                    return RedirectToAction(\r\n                       " +
                    " nameof(Index),\r\n                        new\r\n                        {\r\n       " +
                    "                     Message = ManageMessageId.ChangePasswordSuccess\r\n          " +
                    "              });\r\n                }\r\n\r\n                AddErrors(result);\r\n    " +
                    "            return View(model);\r\n            }\r\n\r\n            return RedirectToA" +
                    "ction(\r\n                nameof(Index),\r\n                new\r\n                {\r\n" +
                    "                    Message = ManageMessageId.Error\r\n                });\r\n      " +
                    "  }\r\n\r\n        // GET: /GeneratorManage/SetPassword\r\n        [HttpGet]\r\n        " +
                    "public IActionResult SetPassword()\r\n        {\r\n            return View();\r\n     " +
                    "   }\r\n\r\n        // POST: /GeneratorManage/SetPassword\r\n        [HttpPost]\r\n     " +
                    "   [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> SetPassw" +
                    "ord(SetPasswordViewModel model)\r\n        {\r\n            if (!ModelState.IsValid)" +
                    "\r\n            {\r\n                return View(model);\r\n            }\r\n\r\n         " +
                    "   var user = await GetCurrentUserAsync();\r\n\r\n            if (user != null)\r\n   " +
                    "         {\r\n                var result = await _userManager.AddPasswordAsync(\r\n " +
                    "                   user,\r\n                    model.NewPassword);\r\n\r\n           " +
                    "     if (result.Succeeded)\r\n                {\r\n                    await _signIn" +
                    "Manager.SignInAsync(\r\n                        user,\r\n                        isP" +
                    "ersistent: false);\r\n\r\n                    return RedirectToAction(\r\n            " +
                    "            nameof(Index),\r\n                        new\r\n                       " +
                    " {\r\n                            Message = ManageMessageId.SetPasswordSuccess\r\n  " +
                    "                      });\r\n                }\r\n\r\n                AddErrors(result" +
                    ");\r\n                return View(model);\r\n            }\r\n\r\n            return Red" +
                    "irectToAction(\r\n                nameof(Index),\r\n                new\r\n           " +
                    "     {\r\n                    Message = ManageMessageId.Error\r\n                });" +
                    "\r\n        }\r\n\r\n        //GET: /GeneratorManage/ManageLogins\r\n        [HttpGet]\r\n" +
                    "        public async Task<IActionResult> ManageLogins(ManageMessageId? message =" +
                    " null)\r\n        {\r\n            ViewData[\"StatusMessage\"] =\r\n                mess" +
                    "age == ManageMessageId.RemoveLoginSuccess ?\r\n                \"The external login" +
                    " was removed.\" :\r\n                message == ManageMessageId.AddLoginSuccess ?\r\n" +
                    "                \"The external login was added.\" :\r\n                message == Ma" +
                    "nageMessageId.Error ?\r\n                \"An error has occurred.\" :\r\n             " +
                    "   \"\";\r\n\r\n            var user = await GetCurrentUserAsync();\r\n\r\n            if " +
                    "(user == null)\r\n            {\r\n                return View(\"Error\");\r\n          " +
                    "  }\r\n\r\n            var userLogins = await _userManager.GetLoginsAsync(user);\r\n  " +
                    "          var schemes = await _signInManager.GetExternalAuthenticationSchemesAsy" +
                    "nc();\r\n\r\n            var otherLogins = schemes.Where(auth =>\r\n                us" +
                    "erLogins.All(ul =>\r\n                    auth.Name != ul.LoginProvider)).ToList()" +
                    ";\r\n\r\n            ViewData[\"ShowRemoveButton\"] =\r\n                user.PasswordHa" +
                    "sh != null\r\n                || userLogins.Count > 1;\r\n\r\n            return View(" +
                    "new ManageLoginsViewModel\r\n            {\r\n                CurrentLogins = userLo" +
                    "gins,\r\n                OtherLogins = otherLogins\r\n            });\r\n        }\r\n\r\n" +
                    "        // POST: /GeneratorManage/LinkLogin\r\n        [HttpPost]\r\n        [Valida" +
                    "teAntiForgeryToken]\r\n        public IActionResult LinkLogin(string provider)\r\n  " +
                    "      {\r\n            // Request a redirect to the external login provider to lin" +
                    "k a login for the current user\r\n            var redirectUrl = Url.Action(\r\n     " +
                    "           \"LinkLoginCallback\",\r\n                \"GeneratorManage\");\r\n\r\n        " +
                    "    var properties = _signInManager.ConfigureExternalAuthenticationProperties(\r\n" +
                    "                provider,\r\n                redirectUrl,\r\n                _userMa" +
                    "nager.GetUserId(User));\r\n\r\n            return Challenge(\r\n                proper" +
                    "ties,\r\n                provider);\r\n        }\r\n\r\n        // GET: /GeneratorManage" +
                    "/LinkLoginCallback\r\n        [HttpGet]\r\n        public async Task<ActionResult> L" +
                    "inkLoginCallback()\r\n        {\r\n            var user = await GetCurrentUserAsync(" +
                    ");\r\n\r\n            if (user == null)\r\n            {\r\n                return View(" +
                    "\"Error\");\r\n            }\r\n\r\n            var info = await _signInManager.GetExter" +
                    "nalLoginInfoAsync(\r\n                await _userManager.GetUserIdAsync(user));\r\n\r" +
                    "\n            if (info == null)\r\n            {\r\n                return RedirectTo" +
                    "Action(\r\n                    nameof(ManageLogins),\r\n                    new\r\n   " +
                    "                 {\r\n                        Message = ManageMessageId.Error\r\n   " +
                    "                 });\r\n            }\r\n\r\n            var result = await _userManag" +
                    "er.AddLoginAsync(\r\n                user,\r\n                info);\r\n            va" +
                    "r message = result.Succeeded ?\r\n                ManageMessageId.AddLoginSuccess " +
                    ":\r\n                ManageMessageId.Error;\r\n\r\n            return RedirectToAction" +
                    "(\r\n                nameof(ManageLogins),\r\n                new { Message = messag" +
                    "e });\r\n        }\r\n\r\n        #region Helpers\r\n\r\n        private void AddErrors(Id" +
                    "entityResult result)\r\n        {\r\n            foreach (var error in result.Errors" +
                    ")\r\n            {\r\n                ModelState.AddModelError(\r\n                   " +
                    " string.Empty,\r\n                    error.Description);\r\n            }\r\n        " +
                    "}\r\n\r\n        public enum ManageMessageId\r\n        {\r\n            AddPhoneSuccess" +
                    ",\r\n            AddLoginSuccess,\r\n            ChangePasswordSuccess,\r\n           " +
                    " SetTwoFactorSuccess,\r\n            SetPasswordSuccess,\r\n            RemoveLoginS" +
                    "uccess,\r\n            RemovePhoneSuccess,\r\n            Error\r\n        }\r\n\r\n      " +
                    "  private Task<ApplicationUser> GetCurrentUserAsync()\r\n        {\r\n            re" +
                    "turn _userManager.GetUserAsync(HttpContext.User);\r\n        }\r\n\r\n        #endregi" +
                    "on\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
