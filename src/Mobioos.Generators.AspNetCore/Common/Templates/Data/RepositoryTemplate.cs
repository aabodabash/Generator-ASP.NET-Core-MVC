// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Data\RepositoryTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class RepositoryTemplate : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 2 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Data\RepositoryTemplate.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write("using Microsoft.EntityFrameworkCore;\r\nusing System;\r\nusing System.Collections.Gen" +
                    "eric;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing ");
            
            #line 8 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Data\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models;\r\n\r\nnamespace ");
            
            #line 10 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Data\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Repositories\r\n{ \r\n    public class Repository<T> : IRepository<T>\r\n     " +
                    "   where T : class\r\n    {\r\n        protected readonly ApplicationDbContext DbCon" +
                    "text;\r\n\r\n        public Repository(ApplicationDbContext context)\r\n        {\r\n   " +
                    "         DbContext = context;\r\n        }\r\n\r\n        public IQueryable<T> GetAll(" +
                    ")\r\n        {\r\n            return DbContext\r\n                .Set<T>()\r\n         " +
                    "       .AsNoTracking();\r\n        }\r\n\r\n        public async Task<T> Get(object[] " +
                    "param)\r\n        {\r\n            return await DbContext\r\n                .Set<T>()" +
                    "\r\n                .FindAsync(param);\r\n        }\r\n\r\n        public async Task Ins" +
                    "ert(T entity)\r\n        {\r\n            if (entity == null)\r\n            {\r\n      " +
                    "          throw new ArgumentNullException(nameof(entity));\r\n            }\r\n\r\n   " +
                    "         await DbContext\r\n                .Set<T>()\r\n                .AddAsync(e" +
                    "ntity);\r\n\r\n            await DbContext.SaveChangesAsync();\r\n        }\r\n\r\n       " +
                    " public async Task Update(T entity)\r\n        {\r\n            if (entity == null)\r" +
                    "\n            {\r\n                throw new ArgumentNullException(nameof(entity));" +
                    "\r\n            }\r\n\r\n            DbContext\r\n                .Set<T>()\r\n           " +
                    "     .Update(entity);\r\n\r\n            await DbContext.SaveChangesAsync();\r\n      " +
                    "  }\r\n\r\n        public async Task Update(\r\n            T oldEntity,\r\n            " +
                    "T entity)\r\n        {\r\n            if (entity == null)\r\n            {\r\n          " +
                    "      throw new ArgumentNullException(nameof(entity));\r\n            }\r\n\r\n       " +
                    "     var contextEntry = DbContext.Entry<T>(oldEntity);\r\n            contextEntry" +
                    ".State = EntityState.Detached;\r\n            DbContext.Attach(entity);\r\n\r\n       " +
                    "     DbContext\r\n                .Set<T>()\r\n                .Update(entity);\r\n   " +
                    "         await DbContext.SaveChangesAsync();\r\n        }\r\n\r\n        public async " +
                    "Task Delete(T entity)\r\n        {\r\n            if (entity == null)\r\n            {" +
                    "\r\n                throw new ArgumentNullException(nameof(entity));\r\n            " +
                    "}\r\n\r\n            DbContext\r\n                .Set<T>()\r\n                .Remove(e" +
                    "ntity);\r\n\r\n            await DbContext.SaveChangesAsync();\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
