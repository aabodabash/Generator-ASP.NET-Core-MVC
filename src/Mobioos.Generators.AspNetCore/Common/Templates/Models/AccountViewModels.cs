// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Models\AccountViewModels.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AccountViewModels : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 2 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Models\AccountViewModels.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel.Dat" +
                    "aAnnotations;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsof" +
                    "t.AspNetCore.Mvc.Rendering;\r\n\r\nnamespace ");
            
            #line 10 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Models\AccountViewModels.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models\r\n{\r\n    public class ExternalLoginConfirmationViewModel\r\n    {\r\n " +
                    "       [Required]\r\n        [EmailAddress]\r\n        public string Email { get; se" +
                    "t; }\r\n    }\r\n\r\n    public class ExternalLoginListViewModel\r\n    {\r\n        publi" +
                    "c string ReturnUrl { get; set; }\r\n    }\r\n\r\n    public class ForgotPasswordViewMo" +
                    "del\r\n    {\r\n        [Required]\r\n        [EmailAddress]\r\n        public string Em" +
                    "ail { get; set; }\r\n    }\r\n\r\n    public class LoginViewModel\r\n    {\r\n        [Req" +
                    "uired]\r\n        [EmailAddress]\r\n        public string Email { get; set; }\r\n\r\n   " +
                    "     [Required]\r\n        [DataType(DataType.Password)]\r\n        public string Pa" +
                    "ssword { get; set; }\r\n\r\n        [Display(Name = \"Remember me?\")]\r\n        public" +
                    " bool RememberMe { get; set; }\r\n    }\r\n\r\n    public class RegisterViewModel\r\n   " +
                    " {\r\n        [Required]\r\n        [EmailAddress]\r\n        [Display(Name = \"Email\")" +
                    "]\r\n        public string Email { get; set; }\r\n\r\n        [Required]\r\n        [Str" +
                    "ingLength(\r\n            100,\r\n            ErrorMessage = \"The {0} must be at lea" +
                    "st {2} and at max {1} characters long.\",\r\n            MinimumLength = 6)]\r\n     " +
                    "   [DataType(DataType.Password)]\r\n        [Display(Name = \"Password\")]\r\n        " +
                    "public string Password { get; set; }\r\n\r\n        [DataType(DataType.Password)]\r\n " +
                    "       [Display(Name = \"Confirm password\")]\r\n        [Compare(\r\n            \"Pas" +
                    "sword\",\r\n            ErrorMessage = \"The password and confirmation password do n" +
                    "ot match.\")]\r\n        public string ConfirmPassword { get; set; }\r\n    }\r\n\r\n    " +
                    "public class ResetPasswordViewModel\r\n    {\r\n        [Required]\r\n        [EmailAd" +
                    "dress]\r\n        public string Email { get; set; }\r\n\r\n        [Required]\r\n       " +
                    " [StringLength(\r\n            100,\r\n            ErrorMessage = \"The {0} must be a" +
                    "t least {2} and at max {1} characters long.\",\r\n            MinimumLength = 6)]\r\n" +
                    "        [DataType(DataType.Password)]\r\n        public string Password { get; set" +
                    "; }\r\n\r\n        [DataType(DataType.Password)]\r\n        [Display(Name = \"Confirm p" +
                    "assword\")]\r\n        [Compare(\r\n            \"Password\",\r\n            ErrorMessage" +
                    " = \"The password and confirmation password do not match.\")]\r\n        public stri" +
                    "ng ConfirmPassword { get; set; }\r\n\r\n        public string Code { get; set; }\r\n  " +
                    "  }\r\n\r\n    public class SendCodeViewModel\r\n    {\r\n        public string Selected" +
                    "Provider { get; set; }\r\n\r\n        public ICollection<SelectListItem> Providers {" +
                    " get; set; }\r\n\r\n        public string ReturnUrl { get; set; }\r\n\r\n        public " +
                    "bool RememberMe { get; set; }\r\n    }\r\n\r\n    public class VerifyCodeViewModel\r\n  " +
                    "  {\r\n        [Required]\r\n        public string Provider { get; set; }\r\n\r\n       " +
                    " [Required]\r\n        public string Code { get; set; }\r\n\r\n        public string R" +
                    "eturnUrl { get; set; }\r\n\r\n        [Display(Name = \"Remember this browser ?\")]\r\n " +
                    "       public bool RememberBrowser { get; set; }\r\n\r\n        [Display(Name = \"Rem" +
                    "ember me ?\")]\r\n        public bool RememberMe { get; set; }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
