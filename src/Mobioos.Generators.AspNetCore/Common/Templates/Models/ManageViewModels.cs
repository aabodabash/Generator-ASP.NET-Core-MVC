// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Models\ManageViewModels.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ManageViewModels : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 2 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Models\ManageViewModels.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace ");
            
            #line 12 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Common\Templates\Models\ManageViewModels.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models\r\n{\r\n    public class AddPhoneNumberViewModel\r\n    {\r\n        [Req" +
                    "uired]\r\n        [Phone]\r\n        [Display(Name = \"Phone number\")]\r\n        publi" +
                    "c string PhoneNumber { get; set; }\r\n    }\r\n\r\n    public class ChangePasswordView" +
                    "Model\r\n    {\r\n        [Required]\r\n        [DataType(DataType.Password)]\r\n       " +
                    " [Display(Name = \"Current password\")]\r\n        public string OldPassword { get; " +
                    "set; }\r\n\r\n        [Required]\r\n        [StringLength(\r\n            100,\r\n        " +
                    "    ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long." +
                    "\",\r\n            MinimumLength = 6)]\r\n        [DataType(DataType.Password)]\r\n    " +
                    "    [Display(Name = \"New password\")]\r\n        public string NewPassword { get; s" +
                    "et; }\r\n\r\n        [DataType(DataType.Password)]\r\n        [Display(Name = \"Confirm" +
                    " new password\")]\r\n        [Compare(\r\n            \"NewPassword\",\r\n            Err" +
                    "orMessage = \"The new password and confirmation password do not match.\")]\r\n      " +
                    "  public string ConfirmPassword { get; set; }\r\n    }\r\n\r\n    public class Configu" +
                    "reTwoFactorViewModel\r\n    {\r\n        public string SelectedProvider { get; set; " +
                    "}\r\n\r\n        public ICollection<SelectListItem> Providers { get; set; }\r\n    }\r\n" +
                    "\r\n    public class FactorViewModel\r\n    {\r\n        public string Purpose { get; " +
                    "set; }\r\n    }\r\n\r\n    public class IndexViewModel\r\n    {\r\n        public bool Has" +
                    "Password { get; set; }\r\n\r\n        public IList<UserLoginInfo> Logins { get; set;" +
                    " }\r\n\r\n        public string PhoneNumber { get; set; }\r\n\r\n        public bool Two" +
                    "Factor { get; set; }\r\n\r\n        public bool BrowserRemembered { get; set; }\r\n   " +
                    " }\r\n\r\n    public class ManageLoginsViewModel\r\n    {\r\n        public IList<UserLo" +
                    "ginInfo> CurrentLogins { get; set; }\r\n\r\n        public IList<AuthenticationSchem" +
                    "e> OtherLogins { get; set; }\r\n    }\r\n\r\n    public class RemoveLoginViewModel\r\n  " +
                    "  {\r\n        public string LoginProvider { get; set; }\r\n        public string Pr" +
                    "oviderKey { get; set; }\r\n    }\r\n\r\n    public class SetPasswordViewModel\r\n    {\r\n" +
                    "        [Required]\r\n        [StringLength(\r\n            100,\r\n            ErrorM" +
                    "essage = \"The {0} must be at least {2} and at max {1} characters long.\",\r\n      " +
                    "      MinimumLength = 6)]\r\n        [DataType(DataType.Password)]\r\n        [Displ" +
                    "ay(Name = \"New password\")]\r\n        public string NewPassword { get; set; }\r\n\r\n " +
                    "       [DataType(DataType.Password)]\r\n        [Display(Name = \"Confirm new passw" +
                    "ord\")]\r\n        [Compare(\r\n            \"NewPassword\",\r\n            ErrorMessage " +
                    "= \"The new password and confirmation password do not match.\")]\r\n        public s" +
                    "tring ConfirmPassword { get; set; }\r\n    }\r\n\r\n    public class VerifyPhoneNumber" +
                    "ViewModel\r\n    {\r\n        [Required]\r\n        public string Code { get; set; }\r\n" +
                    "\r\n        [Required]\r\n        [Phone]\r\n        [Display(Name = \"Phone number\")]\r" +
                    "\n        public string PhoneNumber { get; set; }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
