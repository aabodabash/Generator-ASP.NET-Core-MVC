<#@ include file = "..\..\Base\Templates\Include.tt" #>
<#
    var model = (SmartAppInfo)Model;
    var models = model.GetModels();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Swagger;
using <#= model.Id #>.Backend.Models;
using <#= model.Id #>.Backend.Services;
using <#= model.Id #>.Backend.Infrastructure.Services;
using <#= model.Id #>.Backend.Repositories;

namespace <#= model.Id #>.Backend
{
    public partial class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile(
                    "appsettings.json",
                    optional: false,
                    reloadOnChange: true)
                .AddJsonFile(
                    $"appsettings.{env.EnvironmentName}.json",
                    optional: true);

            if (env.IsDevelopment())
            {
                // For more details on using the user secret store
                // see https://go.microsoft.com/fwlink/?LinkID=532709
                builder.AddUserSecrets<Startup>();
            }

            builder.AddEnvironmentVariables();
            Configuration = builder.Build();
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

            services.AddCors(options =>
            {
                options.AddPolicy("SiteCorsPolicy",
                builder => builder.AllowAnyOrigin()
                    .AllowAnyMethod()
                    .AllowAnyHeader()
                    .AllowCredentials());
            });

            //Configure authentication services.
            ConfigureAuth(services);

            services.AddMvc();

            // Add application services.
            services.AddTransient<IEmailSender, AuthMessageSender>();
            services.AddTransient<ISmsSender, AuthMessageSender>();
            services.AddScoped(typeof(IRepository<>), typeof(Repository<>));

<#
    if (models != null
        && models.FirstOrDefault(e =>
            !e.IsAbstract
            && !e.IsEnum
            && !e.IsInherited(models)) != null)
    {
        foreach (var entity in models.Where(e =>
            !e.IsAbstract
            && !e.IsEnum
            && !e.IsInherited(models)))
        {
#>
            services.AddScoped<I<#= entity.Id #>Repository, <#= entity.Id #>Repository>();
<#
        }

        foreach (var entity in models.Where(e =>
            !e.IsAbstract
            && !e.IsEnum
            && !e.IsInherited(models)))
        {
#>
            services.AddScoped<I<#= entity.Id #>Service, <#= entity.Id #>Service>();
<#
        }
    }
#>

             // Register the Swagger generator, defining one or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc(
                    "v1",
                    new Info
                    {
                        Title = "<#= model.Id #> API",
                        Version = "v1"
                    });
            });
        }

        // This method gets called by the runtime.
        // Use this method to configure the HTTP request pipeline.
        public void Configure(
            IApplicationBuilder app,
            IHostingEnvironment env,
            ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
            loggerFactory.AddDebug();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
                app.UseBrowserLink();
            }
            else
            {
                app.UseExceptionHandler("/GeneratorHome/Error");
            }

            app.UseCors("SiteCorsPolicy");

            app.UseStaticFiles();

            ConfigureAuth(app);

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=GeneratorHome}/{action=Index}/{id?}");
            });

             // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();

            // Enable middleware to serve swagger-ui (HTML, JS, CSS etc.),
            // specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint(
                    "/swagger/v1/swagger.json",
                    "<#= model.Id #> API V1");
            });
        }
    }
}