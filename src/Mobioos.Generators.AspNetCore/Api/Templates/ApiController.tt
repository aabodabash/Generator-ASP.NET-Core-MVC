<#@ include file = "..\..\Base\Templates\Include.tt" #>
<#
    var model = (ApiInfo)Model;
    var actions = ((ApiInfo)Model).Actions;
    var viewModelsNamespace = $"{ApplicationId}.Backend.ViewModels";
    var controllerName = $"{ApplicationId}{model.Id}";
#>
using System;
using System.Net;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using <#= ApplicationId #>.Backend.DataModels;
using <#= ApplicationId #>.Backend.Models;
using <#= ApplicationId #>.Backend.Services;
using <#= viewModelsNamespace #>;

namespace <#= ApplicationId #>.Backend.Api
{
    /// <summary>
    /// Controller responsible for all data interactions with the <#=model.Id#>
    /// </summary>
    public partial class <#= controllerName #>Controller : Controller
    {
<#
    foreach (var entity in Entities)
    {
#>
        private I<#= entity #>Service _<#= entity.ToCamelCase() #>Service;
<#
    }

    var lastEntity = Entities.LastOrDefault();
#>

        /// <summary>
        /// Initialize a new instance of
        /// <see cref = "<#= ApplicationId #>.Backend.Api.<#= controllerName #>Controller"/> class.
        /// </summary>
        public <#= controllerName #>Controller(<#= Entities.Count > 0 ? "" : ")" #>
<#
    foreach (var entity in Entities)
    {
#>
            I<#= entity #>Service <#= entity.ToCamelCase() #>Service<#= !entity.Equals(lastEntity) ? "," : ")" #>
<#
    }
#>
        {
<#
    foreach (var entity in Entities)
    {
#>
             _<#= entity.ToCamelCase() #>Service = <#= entity.ToCamelCase() #>Service;
<#
    }
#>
        }
<#
    foreach (var action in actions)
    {
        var firstParameter = action
            .Parameters
            .FirstOrDefault();

        var lastParameter = action.Parameters.LastOrDefault();
#>


        [<#= action.CSharpType() #>]
        [Route("<#= action.Url #>")]
<#
        if (action.ReturnType != null)
        {
            var returnType = $"{viewModelsNamespace}.{action.ReturnType.Id}";
#>
        [ProducesResponseType(
            typeof(<#= returnType #>),
            200)]
<#
        }
#>
        public async Task<IActionResult> <#= action.Id #>(
<#
        foreach (var parameter in action.Parameters)
        {
            var parameterType = parameter.CSharpType();

            if (parameter.IsModel())
            {
                parameterType =
                    $"{viewModelsNamespace}.{parameterType.ToPascalCase()}";
            }
#>
            <#= parameterType #> <#= parameter.Id #><#= !parameter.Equals(lastParameter) ? "," : ")" #>
<#
        }

        if (action.Type?.ToLower() == "datacreate"
           && firstParameter != null)
        {
            var template = new ApiPostTemplate(action);
            Write(template.TransformText());
        }
        else if (action.Type?.ToLower() == "dataupdate"
                && firstParameter != null)
        {
            var template = new ApiPutTemplate(action);
            Write(template.TransformText());
        }
        else if (action.Type == "datadelete"
                && firstParameter != null)
        {
            var template = new ApiDeleteTemplate(action);
            Write(template.TransformText());
        }
        else if (action.Type?.ToLower() == "datalist")
        {
            var template = new ApiGetAllTemplate(
                action,
                ApplicationId);

            Write(template.TransformText());
        }
        else if (action.Type?.ToLower() == "dataget")
        {
            var template = new ApiGetTemplate(
                action,
                ApplicationId);

            Write(template.TransformText());
        }
    }
#>

    }
}