// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\JwtIssuerOptions.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class JwtIssuerOptions : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 2 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\JwtIssuerOptions.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.IdentityModel.Token" +
                    "s;\r\n\r\nnamespace ");
            
            #line 7 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\JwtIssuerOptions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Auth\r\n{\r\n    public class JwtIssuerOptions\r\n    {\r\n        /// <summary>" +
                    "\r\n        /// \"iss\" (Issuer) Claim - The \"iss\" (issuer) claim identifies\r\n      " +
                    "  /// the principal that issued the JWT.\r\n        /// </summary>\r\n        public" +
                    " string Issuer { get; set; }\r\n\r\n        /// <summary>\r\n        /// \"sub\" (Subjec" +
                    "t) Claim - The \"sub\" (subject) claim identifies\r\n        /// the principal that " +
                    "is the subject of the JWT.\r\n        /// </summary>\r\n        public string Subjec" +
                    "t { get; set; }\r\n\r\n        /// <summary>\r\n        /// \"aud\" (Audience) Claim - T" +
                    "he \"aud\" (audience) claim identifies\r\n        /// the recipients that the JWT is" +
                    " intended for.\r\n        /// </summary>\r\n        public string Audience { get; se" +
                    "t; }\r\n\r\n        /// <summary>\r\n        /// \"exp\" (Expiration Time) Claim - The \"" +
                    "exp\" (expiration time) claim identifies\r\n        /// the expiration time on or a" +
                    "fter which the JWT MUST NOT be accepted for processing.\r\n        /// </summary>\r" +
                    "\n        public DateTime Expiration => IssuedAt.Add(ValidFor);\r\n\r\n        /// <s" +
                    "ummary>\r\n        /// \"nbf\" (Not Before) Claim - The \"nbf\" (not before) claim ide" +
                    "ntifies\r\n        /// the time before which the JWT MUST NOT be accepted for proc" +
                    "essing.\r\n        /// </summary>\r\n        public DateTime NotBefore { get; set; }" +
                    " = DateTime.UtcNow;\r\n\r\n        /// <summary>\r\n        /// \"iat\" (Issued At) Clai" +
                    "m - The \"iat\" (issued at) claim identifies\r\n        /// the time at which the JW" +
                    "T was issued.\r\n        /// </summary>\r\n        public DateTime IssuedAt { get; s" +
                    "et; } = DateTime.UtcNow;\r\n\r\n        /// <summary>\r\n        /// Set the timespan " +
                    "the token will be valid for (default is 120 min)\r\n        /// </summary>\r\n      " +
                    "  public TimeSpan ValidFor { get; set; } = TimeSpan.FromMinutes(120);\r\n\r\n       " +
                    " /// <summary>\r\n        /// \"jti\" (JWT ID) Claim (default ID is a GUID)\r\n       " +
                    " /// </summary>\r\n        public Func<Task<string>> JtiGenerator\r\n        => () =" +
                    "> Task.FromResult(Guid.NewGuid().ToString());\r\n\r\n        /// <summary>\r\n        " +
                    "/// The signing key to use when generating tokens.\r\n        /// </summary>\r\n    " +
                    "    public SigningCredentials SigningCredentials { get; set; }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
