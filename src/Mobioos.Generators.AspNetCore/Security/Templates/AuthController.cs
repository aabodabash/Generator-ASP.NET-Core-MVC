// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\AuthController.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AuthController : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 2 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\AuthController.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write("using System.Security.Claims;\r\nusing System.Threading.Tasks;\r\nusing ");
            
            #line 5 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Auth;\r\nusing ");
            
            #line 6 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Helpers;\r\nusing ");
            
            #line 7 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models;\r\nusing ");
            
            #line 8 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.ViewModels;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNe" +
                    "tCore.Mvc;\r\nusing Microsoft.Extensions.Options;\r\nusing Newtonsoft.Json;\r\n\r\nnames" +
                    "pace ");
            
            #line 14 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Api\r\n{\r\n    [Route(\"api/[controller]\")]\r\n    public class AuthController" +
                    " : Controller\r\n    {\r\n        private readonly UserManager<ApplicationUser> _use" +
                    "rManager;\r\n        private readonly IJwtFactory _jwtFactory;\r\n        private re" +
                    "adonly JwtIssuerOptions _jwtOptions;\r\n\r\n        public AuthController(\r\n        " +
                    "    UserManager<ApplicationUser> userManager,\r\n            IJwtFactory jwtFactor" +
                    "y,\r\n            IOptions<JwtIssuerOptions> jwtOptions)\r\n        {\r\n            _" +
                    "userManager = userManager;\r\n            _jwtFactory = jwtFactory;\r\n            _" +
                    "jwtOptions = jwtOptions.Value;\r\n        }\r\n\r\n        // POST api/auth/login\r\n   " +
                    "     [HttpPost(\"login\")]\r\n        public async Task<IActionResult> Login(\r\n     " +
                    "       [FromBody]LoginViewModel credentials)\r\n        {\r\n            if (!ModelS" +
                    "tate.IsValid)\r\n            {\r\n                return BadRequest(ModelState);\r\n  " +
                    "          }\r\n\r\n            var identity = await GetClaimsIdentity(\r\n            " +
                    "    credentials.Email,\r\n                credentials.Password);\r\n\r\n            if" +
                    " (identity == null)\r\n            {\r\n                return BadRequest(\r\n        " +
                    "            Errors.AddErrorToModelState(\r\n                        \"login_failure" +
                    "\",\r\n                        \"Invalid username or password.\",\r\n                  " +
                    "      ModelState));\r\n            }\r\n\r\n            var jwt = await Tokens.Generat" +
                    "eJwt(\r\n                identity,\r\n                _jwtFactory,\r\n                " +
                    "credentials.Email,\r\n                _jwtOptions,\r\n                new JsonSerial" +
                    "izerSettings\r\n                {\r\n                    Formatting = Formatting.Ind" +
                    "ented\r\n                });\r\n\r\n            return new OkObjectResult(jwt);\r\n     " +
                    "   }\r\n\r\n        private async Task<ClaimsIdentity> GetClaimsIdentity(\r\n         " +
                    "   string userName,\r\n            string password)\r\n        {\r\n            if (st" +
                    "ring.IsNullOrEmpty(userName)\r\n                || string.IsNullOrEmpty(password))" +
                    "\r\n            {\r\n                return await Task.FromResult<ClaimsIdentity>(nu" +
                    "ll);\r\n            }\r\n\r\n            // get the user to verifty\r\n            var u" +
                    "serToVerify = await _userManager.FindByNameAsync(userName);\r\n\r\n            if (u" +
                    "serToVerify == null)\r\n            {\r\n                return await Task.FromResul" +
                    "t<ClaimsIdentity>(null);\r\n            }\r\n\r\n            // check the credentials\r" +
                    "\n            if (await _userManager.CheckPasswordAsync(\r\n                userToV" +
                    "erify,\r\n                password))\r\n            {\r\n                return await " +
                    "Task.FromResult(\r\n                    _jwtFactory.GenerateClaimsIdentity(\r\n     " +
                    "                   userName,\r\n                        userToVerify.Id));\r\n      " +
                    "      }\r\n\r\n            // Credentials are invalid, or account doesn\'t exist\r\n   " +
                    "         return await Task.FromResult<ClaimsIdentity>(null);\r\n        }\r\n    }\r\n" +
                    "}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
