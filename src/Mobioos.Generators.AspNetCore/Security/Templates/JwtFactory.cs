// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Common.Generator.Framework.Extensions;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\JwtFactory.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class JwtFactory : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 2 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\JwtFactory.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.IdentityModel.Tokens.Jwt;\r\nusing System.Security.Clai" +
                    "ms;\r\nusing System.Security.Principal;\r\nusing System.Threading.Tasks;\r\nusing Micr" +
                    "osoft.Extensions.Options;\r\nusing ");
            
            #line 9 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\JwtFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models;\r\nusing ");
            
            #line 10 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\JwtFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Helpers;\r\n\r\nnamespace ");
            
            #line 12 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Mobioos.Generators.AspNetCore\Security\Templates\JwtFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Auth\r\n{\r\n    public class JwtFactory : IJwtFactory\r\n    {\r\n        priva" +
                    "te readonly JwtIssuerOptions _jwtOptions;\r\n\r\n        public JwtFactory(IOptions<" +
                    "JwtIssuerOptions> jwtOptions)\r\n        {\r\n            _jwtOptions = jwtOptions.V" +
                    "alue;\r\n            ThrowIfInvalidOptions(_jwtOptions);\r\n        }\r\n\r\n        pub" +
                    "lic async Task<string> GenerateEncodedToken(\r\n            string userName,\r\n    " +
                    "        ClaimsIdentity identity)\r\n        {\r\n            var claims = new[]\r\n   " +
                    "         {\r\n                 new Claim(\r\n                    JwtRegisteredClaimN" +
                    "ames.Sub,\r\n                    userName),\r\n                 new Claim(\r\n        " +
                    "            JwtRegisteredClaimNames.Jti,\r\n                    await _jwtOptions." +
                    "JtiGenerator()),\r\n                 new Claim(\r\n                    JwtRegistered" +
                    "ClaimNames.Iat,\r\n                    ToUnixEpochDate(\r\n                        _" +
                    "jwtOptions.IssuedAt).ToString(),\r\n                        ClaimValueTypes.Intege" +
                    "r64),\r\n                 identity\r\n                    .FindFirst(Helpers.Constan" +
                    "ts.Strings.JwtClaimIdentifiers.Rol),\r\n                 identity\r\n               " +
                    "     .FindFirst(Helpers.Constants.Strings.JwtClaimIdentifiers.Id)\r\n            }" +
                    ";\r\n\r\n            // Create the JWT security token and encode it.\r\n            va" +
                    "r jwt = new JwtSecurityToken(\r\n                issuer: _jwtOptions.Issuer,\r\n    " +
                    "            audience: _jwtOptions.Audience,\r\n                claims: claims,\r\n  " +
                    "              notBefore: _jwtOptions.NotBefore,\r\n                expires: _jwtOp" +
                    "tions.Expiration,\r\n                signingCredentials: _jwtOptions.SigningCreden" +
                    "tials);\r\n\r\n            var encodedJwt = new JwtSecurityTokenHandler().WriteToken" +
                    "(jwt);\r\n\r\n            return encodedJwt;\r\n        }\r\n\r\n        public ClaimsIden" +
                    "tity GenerateClaimsIdentity(\r\n            string userName,\r\n            string i" +
                    "d)\r\n        {\r\n            return new ClaimsIdentity(\r\n                new Gener" +
                    "icIdentity(\r\n                    userName,\r\n                    \"Token\"),\r\n     " +
                    "           new[]\r\n                {\r\n                    new Claim(\r\n           " +
                    "             Helpers.Constants.Strings.JwtClaimIdentifiers.Id,\r\n                " +
                    "        id),\r\n                    new Claim(\r\n                        Helpers.Co" +
                    "nstants.Strings.JwtClaimIdentifiers.Rol,\r\n                        Helpers.Consta" +
                    "nts.Strings.JwtClaims.ApiAccess)\r\n                });\r\n        }\r\n\r\n        /// " +
                    "<returns>Date converted to seconds since Unix epoch (Jan 1, 1970, midnight UTC)." +
                    "</returns>\r\n        private static long ToUnixEpochDate(DateTime date)\r\n        " +
                    "=> (long)Math\r\n            .Round(\r\n                (date.ToUniversalTime() -\r\n " +
                    "               new DateTimeOffset(\r\n                    1970,\r\n                 " +
                    "   1,\r\n                    1,\r\n                    0,\r\n                    0,\r\n " +
                    "                   0,\r\n                    TimeSpan.Zero)).TotalSeconds);\r\n\r\n\r\n " +
                    "       private static void ThrowIfInvalidOptions(JwtIssuerOptions options)\r\n    " +
                    "    {\r\n            if (options == null)\r\n            {\r\n                throw ne" +
                    "w ArgumentNullException(nameof(options));\r\n            }\r\n\r\n            if (opti" +
                    "ons.ValidFor <= TimeSpan.Zero)\r\n            {\r\n                throw new Argumen" +
                    "tException(\r\n                    \"Must be a non-zero TimeSpan.\",\r\n              " +
                    "      nameof(JwtIssuerOptions.ValidFor));\r\n            }\r\n\r\n            if (opti" +
                    "ons.SigningCredentials == null)\r\n            {\r\n                throw new Argume" +
                    "ntNullException(nameof(JwtIssuerOptions.SigningCredentials));\r\n            }\r\n\r\n" +
                    "            if (options.JtiGenerator == null)\r\n            {\r\n                th" +
                    "row new ArgumentNullException(nameof(JwtIssuerOptions.JtiGenerator));\r\n         " +
                    "   }\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
