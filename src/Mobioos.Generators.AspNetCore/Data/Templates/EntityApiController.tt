<#@ include file = "..\..\Base\Templates\Include.tt" #>
<#
    var model = (EntityInfo)Model;
    var key = ((EntityInfo)Model).GetProperties() != null ?
        ((EntityInfo)Model)
            .GetProperties()
            .FirstOrDefault(p => p.IsKey) :
        null;
#>
using System;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using <#= ApplicationId #>.Backend.DataModels;
using <#= ApplicationId #>.Backend.Models;
using <#= ApplicationId #>.Backend.Services;

namespace <#= ApplicationId #>.Backend.Api.<#= Version #>
{
    [Route("api/<#= Version #>/<#= model.Id #>")]
    public partial class <#= model.Id #>Controller : Controller
    {
        private I<#= model.Id #>Service _<#= model.Id #>Service;

        public <#= model.Id #>Controller(I<#= model.Id #>Service <#= model.Id #>Service)
        {
            _<#= model.Id #>Service = <#= model.Id #>Service;
        }

        /// <summary>
        /// Get all <#= model.Id #> from database
        /// </summary>
        /// <returns></returns>
        /// <response code = "200">Ok</response>
        // GET: api/<#= Version #>/<#= model.Id #>
        [HttpGet("GetAll")]
        [ProducesResponseType(
            typeof(IEnumerable<<#= model.Id #>>),
            200)]
        public async virtual Task<IActionResult> GetAll()
        {
            try
            {
                return Ok((_<#= model.Id #>Service.GetAll()).AsQueryable());
            }
            catch (Exception xcp)
            {
                //log error
                return Ok(Enumerable.Empty<<#= model.Id #>>().AsQueryable());
            }
        }
<#
    if (key != null)
    {
#>
        /// <summary>
        /// Get <#= model.Id #> by id
        /// </summary>
        /// <param name = "id"><#= model.Id #> id</param>
        /// <returns>Corresponding <#= model.Id #>
        /// <see cref = "<#= model.Id #>" ><#= model.Id #></see></returns>
        /// <response code = "200">Ok</response>
        /// <response code = "404">Not found</response>
        [ProducesResponseType(
            typeof(<#= model.Id #>),
            200)]
        // GET: api/<#= Version #>/<#= model.Id #>/<id>
        [HttpGet("Get")]
        public async virtual Task<IActionResult> GetById(<#= key.CSharpType() #> id)
        {
            try
            {
                var entity = await _<#= model.Id #>Service.GetById(id);

                if (entity == null)
                {
                    return NotFound();
                }

                return Ok(entity);
            }
            catch (Exception xcp)
            {
                //log error
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

        /// <summary>
        /// Update existing <#= model.Id #>
        /// </summary>
        /// <param name = "id"><#= model.Id #> id</param>
        /// <param name = "entity"><#= model.Id #> to update</param>
        /// <response code = "204">No content</response>
        /// <response code = "400">Bad request</response>
        /// <response code = "404">Not found</response>
        /// <response code = "500">Internal error</response>
        // PUT: api/<#= Version #>/<#= model.Id #>/<id>
        [ProducesResponseType(
            typeof(void),
            200)]
        [HttpPut("PutEntity")]
        public async virtual Task<IActionResult> PutEntity(
            <#= key.CSharpType() #> id,
            [FromBody] <#= model.Id #> entity)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

<#
        if (!string.IsNullOrEmpty(key.Id))
        {
#>
            if (id != entity.<#= key.Id #>)
            {
                return BadRequest();
            }
<#
        }

        if (!string.IsNullOrEmpty(key.Id))
        {
#>
            // Gets the original entity from the database.
            var original = _<#= model.Id #>Service.GetById(entity.<#= key.Id #>);
<#
        }
#>

            // If not found, return the 404 http status.
            if (original == null)
            {
                return NotFound();
            }

            // Sets a new rawVersion to the update entity.
            entity.RawVersion = System.BitConverter.GetBytes(DateTime.Now.Ticks);

            try
            {
                // Save changes to database.
                await _<#= model.Id #>Service.Save(entity);

                // Return the 200 http status with no content.
                return  StatusCode((int)HttpStatusCode.OK);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!this.EntityExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
            catch (Exception xcp)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

        /// <summary>
        /// Create a new <#= model.Id #>
        /// </summary>
        /// <param name = "entity"><#= model.Id #> to create</param>
        /// <returns>New <#= model.Id #> <see cref = "<#= model.Id #>"><#= model.Id #></see></returns>
        /// <response code = "200">Ok</response>
        /// <response code = "400">Bad request</response>
        /// <response code = "409">Conflict</response>
        /// <response code = "500">Internal error</response>
        [ProducesResponseType(
            typeof(<#= model.Id #>),
            200)]
        // POST: api/<#= Version #>/<#= model.Id #>
        [HttpPost("PostEntity")]
        public async virtual Task<IActionResult> PostEntity(
            [FromBody] <#= model.Id #> entity)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await _<#= model.Id #>Service.Save(entity);
                return this.Ok(entity);
            }
            catch (DbUpdateException xcp)
            {
<#
        if (!string.IsNullOrEmpty(key.Id))
        {
#>
                if (this.EntityExists(entity.<#= key.Id #>))
                {
                    return StatusCode((int)HttpStatusCode.Conflict);
                }
                else
                {
                    throw xcp;
                }
<#
        }
#>
            }
            catch (Exception xcp) {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

        /// <summary>
        /// Delete an existing <#= model.Id #>
        /// </summary>
        /// <param name = "entity"><#= model.Id #> to create</param>
        /// <response code = "200">Ok</response>
        /// <response code = "404">Not found</response>
        /// <response code = "500">Internal error</response>
        // DELETE: api/<#= Version #>/<#= model.Id #>/<id>
        [HttpDelete("DeleteEntity")]
        public async virtual Task<IActionResult> DeleteEntity(<#= key.CSharpType() #> id)
        {
            try
            {
                var entity = await _<#= model.Id #>Service.GetById(id);

                if (entity == null)
                {
                    return NotFound();
                }

                await _<#= model.Id #>Service.Delete(id);

                return Ok(entity);
            }
            catch (Exception xcp)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

<#
        if (!string.IsNullOrEmpty(key.Id))
        {
#>
        protected virtual bool EntityExists(<#= key.CSharpType() #> id)
        {
            return _<#= model.Id #>Service.GetById(id) != null;
        }
<#
        }
    }
#>

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
            }
            base.Dispose(disposing);
        }
    }
}