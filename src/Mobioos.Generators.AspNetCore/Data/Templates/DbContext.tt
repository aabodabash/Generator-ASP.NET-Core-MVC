<#@ include file = "..\..\Base\Templates\Include.tt" #>
<#
    var model = (SmartAppInfo)Model;
    var models = model.GetModels();
#>
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using <#= model.Id #>.Backend.DataModels;

namespace <#= model.Id #>.Backend.Models
{
    public partial class ApplicationDbContext : IdentityDbContext<ApplicationUser>
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            builder
                .Entity<IdentityUserLogin<string>>()
                .HasKey(e => new
                {
                    e.UserId
                });

            builder
                .Entity<IdentityRole>()
                .HasKey(e => new
                {
                    e.Id
                });

            builder
                .Entity<IdentityUserRole<string>>()
                .HasKey(e => new
                {
                    e.RoleId,
                    e.UserId
                });

            builder
                .Entity<IdentityUserToken<string>>()
                .HasKey(e => new
                {
                    e.UserId
                });

<#
    if (models != null)
    {
        foreach (var entity in models)
        {
            var primaryKey = entity
                .GetProperties()?
                .FirstOrDefault(p => p.IsKey);

            if (!entity.IsAbstract
                && !entity.IsEnum
                && !entity.IsInherited(models)
                && primaryKey != null)
            {
                var lastKey = entity
                    .GetProperties()
                    .Where(p => p.IsKey)
                    .LastOrDefault();
#>
            builder
                .Entity<<#= entity.Id #>>()
                .HasKey(e => new
                {
<#
                foreach (var key in entity
                    .GetProperties()
                    .Where(p => p.IsKey))
                {
#>
                    e.<#= key.Id.ToPascalCase() #><#= !key.Equals(lastKey) ? " ," : "" #>
<#
                }
#>
                });
<#
            }
        }
    }
#>
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
        }

<#
    if (models != null)
    {
        foreach (var entity in models)
        {
            var key = entity
                .GetProperties()?
                .FirstOrDefault(p => p.IsKey);

            if (!entity.IsAbstract
                && !entity.IsEnum
                && !entity.IsInherited(models)
                && key != null)
            {
#>

        public DbSet<<#= entity.Id #>> <#= entity.Id #> { get; set; }
<#
            }
        }
    }
#>
    }
}