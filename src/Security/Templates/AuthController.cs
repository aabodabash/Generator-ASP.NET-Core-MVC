// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 15.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Foundation.Jade.Extensions;
    using Mobioos.Scaffold.TextTemplating;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\DEV\Generators\Mobioos\Security\Templates\AuthController.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class AuthController : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            
            #line 1 "D:\DEV\Generators\Mobioos\Security\Templates\AuthController.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write("using System.Security.Claims;\r\nusing System.Threading.Tasks;\r\nusing ");
            
            #line 4 "D:\DEV\Generators\Mobioos\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Auth;\r\nusing ");
            
            #line 5 "D:\DEV\Generators\Mobioos\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Helpers;\r\nusing ");
            
            #line 6 "D:\DEV\Generators\Mobioos\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models;\r\nusing ");
            
            #line 7 "D:\DEV\Generators\Mobioos\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.ViewModels;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNe" +
                    "tCore.Mvc;\r\nusing Microsoft.Extensions.Options;\r\nusing Newtonsoft.Json;\r\n\r\nnames" +
                    "pace ");
            
            #line 13 "D:\DEV\Generators\Mobioos\Security\Templates\AuthController.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Api\r\n{\r\n\t[Route(\"api/[controller]\")]\r\n    public class AuthController : " +
                    "Controller\r\n    {\r\n        private readonly UserManager<ApplicationUser> _userMa" +
                    "nager;\r\n        private readonly IJwtFactory _jwtFactory;\r\n        private reado" +
                    "nly JwtIssuerOptions _jwtOptions;\r\n\r\n        public AuthController(UserManager<A" +
                    "pplicationUser> userManager, IJwtFactory jwtFactory, IOptions<JwtIssuerOptions> " +
                    "jwtOptions)\r\n        {\r\n            _userManager = userManager;\r\n            _jw" +
                    "tFactory = jwtFactory;\r\n            _jwtOptions = jwtOptions.Value;\r\n        }\r\n" +
                    "\r\n        // POST api/auth/login\r\n        [HttpPost(\"login\")]\r\n        public as" +
                    "ync Task<IActionResult> Login([FromBody]LoginViewModel credentials)\r\n        {\r\n" +
                    "            if (!ModelState.IsValid)\r\n            {\r\n                return BadR" +
                    "equest(ModelState);\r\n            }\r\n\r\n            var identity = await GetClaims" +
                    "Identity(credentials.Email, credentials.Password);\r\n            if (identity == " +
                    "null)\r\n            {\r\n                return BadRequest(Errors.AddErrorToModelSt" +
                    "ate(\"login_failure\", \"Invalid username or password.\", ModelState));\r\n           " +
                    " }\r\n\r\n\t\t\tvar jwt = await Tokens.GenerateJwt(identity, _jwtFactory, credentials.E" +
                    "mail, _jwtOptions, new JsonSerializerSettings { Formatting = Formatting.Indented" +
                    " });\r\n\t\t\treturn new OkObjectResult(jwt);\r\n        }\r\n\r\n        private async Tas" +
                    "k<ClaimsIdentity> GetClaimsIdentity(string userName, string password)\r\n        {" +
                    "\r\n            if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(passwor" +
                    "d))\r\n                return await Task.FromResult<ClaimsIdentity>(null);\r\n\r\n    " +
                    "        // get the user to verifty\r\n            var userToVerify = await _userMa" +
                    "nager.FindByNameAsync(userName);\r\n\r\n            if (userToVerify == null) return" +
                    " await Task.FromResult<ClaimsIdentity>(null);\r\n\r\n            // check the creden" +
                    "tials\r\n            if (await _userManager.CheckPasswordAsync(userToVerify, passw" +
                    "ord))\r\n            {\r\n                return await Task.FromResult(_jwtFactory.G" +
                    "enerateClaimsIdentity(userName, userToVerify.Id));\r\n            }\r\n\r\n           " +
                    " // Credentials are invalid, or account doesn\'t exist\r\n            return await " +
                    "Task.FromResult<ClaimsIdentity>(null);\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
