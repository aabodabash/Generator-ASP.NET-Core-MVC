// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mobioos.Generators.AspNetCore
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Foundation.Jade.Extensions;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Mobioos.Generators.AspNetCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class StartupAuth : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            
            #line 1 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
 var model = (SmartAppInfo)Model; 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Text;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using ");
            
            #line 10 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Models;\r\nusing ");
            
            #line 11 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend.Auth;\r\n\r\nnamespace ");
            
            #line 13 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Id));
            
            #line default
            #line hidden
            this.Write(".Backend\r\n{\r\n    public partial class Startup\r\n    {\r\n\t\tprivate const string Secr" +
                    "etKey = \"iNivDmHLpUA223sqsfhqGbMRdRj1PVkH\"; // todo: get this from somewhere sec" +
                    "ure\r\n\t\tprivate readonly SymmetricSecurityKey _signingKey = new SymmetricSecurity" +
                    "Key(Encoding.ASCII.GetBytes(SecretKey));\r\n\r\n\t\tpublic void ConfigureAuth(IService" +
                    "Collection services)\r\n        {\r\n\t\t   services.AddTransient<IJwtFactory, JwtFact" +
                    "ory>();\r\n\r\n           services.AddIdentity<ApplicationUser, IdentityRole>()\r\n   " +
                    "             .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                " +
                    ".AddDefaultTokenProviders();\r\n\r\n\t\t\tvar jwtSettingOptions = Configuration.GetSect" +
                    "ion(nameof(JwtIssuerOptions));\r\n\t\t\t\r\n\t\t\t// Configure JwtIssuerOptions\r\n\t\t\tservic" +
                    "es.Configure<JwtIssuerOptions>(options =>\r\n\t\t\t{\r\n\t\t\t\toptions.Issuer = jwtSetting" +
                    "Options[nameof(JwtIssuerOptions.Issuer)];\r\n\t\t\t\toptions.Audience = jwtSettingOpti" +
                    "ons[nameof(JwtIssuerOptions.Audience)];\r\n\t\t\t\toptions.SigningCredentials = new Si" +
                    "gningCredentials(_signingKey, SecurityAlgorithms.HmacSha256);\r\n\t\t\t});\r\n\r\n\t\t\t// G" +
                    "et options from app settings\r\n\t\t\tvar authSettings = Configuration.GetSection(nam" +
                    "eof(AuthSettings));\r\n\r\n\t\t\t// Configure AuthSettings\r\n\t\t\tservices.Configure<AuthS" +
                    "ettings>(options =>\r\n\t\t\t{\r\n\t\t\t\toptions.FacebookAppId = authSettings[nameof(AuthS" +
                    "ettings.FacebookAppId)];\r\n\t\t\t\toptions.FacebookAppSecret = authSettings[nameof(Au" +
                    "thSettings.FacebookAppSecret)];\r\n                options.TwitterAppId = authSett" +
                    "ings[nameof(AuthSettings.TwitterAppId)];\r\n                options.TwitterAppSecr" +
                    "et = authSettings[nameof(AuthSettings.TwitterAppSecret)];\r\n                optio" +
                    "ns.GoogleAppId = authSettings[nameof(AuthSettings.GoogleAppId)];\r\n              " +
                    "  options.GoogleAppSecret = authSettings[nameof(AuthSettings.GoogleAppSecret)];\r" +
                    "\n                options.MicrosoftAppId = authSettings[nameof(AuthSettings.Micro" +
                    "softAppId)];\r\n                options.MicrosoftAppSecret = authSettings[nameof(A" +
                    "uthSettings.MicrosoftAppSecret)];\r\n\t\t\t});\r\n\r\n\t\t\tvar tokenValidationParameters = " +
                    "new TokenValidationParameters\r\n\t\t\t{\r\n\t\t\t\tValidateIssuer = true,\r\n\t\t\t\tValidIssuer" +
                    " = jwtSettingOptions[nameof(JwtIssuerOptions.Issuer)],\r\n\r\n\t\t\t\tValidateAudience =" +
                    " true,\r\n\t\t\t\tValidAudience = jwtSettingOptions[nameof(JwtIssuerOptions.Audience)]" +
                    ",\r\n\r\n\t\t\t\tValidateIssuerSigningKey = true,\r\n\t\t\t\tIssuerSigningKey = _signingKey,\r\n" +
                    "\r\n\t\t\t\tRequireExpirationTime = false,\r\n\t\t\t\tValidateLifetime = true,\r\n\t\t\t\tClockSke" +
                    "w = TimeSpan.Zero\r\n\t\t\t};\r\n\r\n");
            
            #line 70 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"

                if (AuthenticationKeys != null) 
                {

            
            #line default
            #line hidden
            this.Write(@"            services.AddAuthentication(options =>
			{
				options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
				options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
			}).AddCookie(cfg => cfg.SlidingExpiration = true)
			.AddJwtBearer(configureOptions =>
			{
				configureOptions.ClaimsIssuer = jwtSettingOptions[nameof(JwtIssuerOptions.Issuer)];
				configureOptions.TokenValidationParameters = tokenValidationParameters;
				configureOptions.SaveToken = true;
			})");
            
            #line 84 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
 if(AuthenticationKeys.ContainsKey("FacebookAuthConsumerKey") && AuthenticationKeys.ContainsKey("FacebookAuthConsumerSecret")) {
            
            #line default
            #line hidden
            this.Write("\t\t\t.AddFacebook(facebookOptions =>\r\n\t\t\t{\r\n\t\t\t\tfacebookOptions.AppId = authSetting" +
                    "s[nameof(AuthSettings.FacebookAppId)];\r\n\t\t\t\tfacebookOptions.AppSecret = authSett" +
                    "ings[nameof(AuthSettings.FacebookAppSecret)];\r\n\t\t\t})\r\n\t\t\t");
            
            #line 90 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 91 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
 if(AuthenticationKeys.ContainsKey("TwitterAuthAppId") && AuthenticationKeys.ContainsKey("TwitterAuthAppSecret")) {
            
            #line default
            #line hidden
            this.Write("\t\t\t.AddTwitter(twitterOptions =>\r\n\t\t\t{\r\n\t\t\t\ttwitterOptions.ConsumerKey = authSett" +
                    "ings[nameof(AuthSettings.TwitterAppId)];\r\n\t\t\t\ttwitterOptions.ConsumerSecret = au" +
                    "thSettings[nameof(AuthSettings.TwitterAppSecret)];\r\n\t\t\t})\r\n\t\t\t");
            
            #line 97 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 98 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
 if(AuthenticationKeys.ContainsKey("GoogleAuthClientId") && AuthenticationKeys.ContainsKey("GoogleAuthSecret")) {
            
            #line default
            #line hidden
            this.Write("\t\t\t.AddGoogle(googleOptions =>\r\n\t\t\t{\r\n\t\t\t\tgoogleOptions.ClientId = authSettings[n" +
                    "ameof(AuthSettings.GoogleAppId)];\r\n\t\t\t\tgoogleOptions.ClientSecret = authSettings" +
                    "[nameof(AuthSettings.GoogleAppSecret)];\r\n\t\t\t})\r\n\t\t\t");
            
            #line 104 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            ;\r\n\t\t\t");
            
            #line 106 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
 if(AuthenticationKeys.ContainsKey("MicrosoftAuthClientId") && AuthenticationKeys.ContainsKey("MicrosoftAuthSecret")) {
            
            #line default
            #line hidden
            this.Write(@"			services.AddAuthentication().AddMicrosoftAccount(microsoftOptions =>
			{
				microsoftOptions.ClientId = authSettings[nameof(AuthSettings.MicrosoftAppId)];
				microsoftOptions.ClientSecret = authSettings[nameof(AuthSettings.MicrosoftAppSecret)];
			});");
            
            #line 111 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"
}
            
            #line default
            #line hidden
            
            #line 112 "C:\Users\PC\Documents\Gits\ASP.NET-Core-MVC\src\Security\Templates\StartupAuth.tt"

                }

            
            #line default
            #line hidden
            this.Write(@"			

			services.Configure<IdentityOptions>(options =>
            {
                // Password settings

                // Lockout settings
                options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);
                options.Lockout.MaxFailedAccessAttempts = 10;
                options.Lockout.AllowedForNewUsers = true;

                // User settings
                options.User.RequireUniqueEmail = true;
            });

            services.ConfigureApplicationCookie(options =>
            {
                // Cookie settings
                options.Cookie.HttpOnly = true;
                options.Cookie.Expiration = TimeSpan.FromDays(150);
                options.LoginPath = ""/Account/Login""; // If the LoginPath is not set here, ASP.NET Core will default to /Account/Login
                options.LogoutPath = ""/Account/Logout""; // If the LogoutPath is not set here, ASP.NET Core will default to /Account/Logout
                options.AccessDeniedPath = ""/Account/AccessDenied""; // If the AccessDeniedPath is not set here, ASP.NET Core will default to /Account/AccessDenied
                options.SlidingExpiration = true;
            });
        }

        public void ConfigureAuth(IApplicationBuilder app)
        {
            app.UseAuthentication();

            // Add external authentication middleware below. To configure them please see https://go.microsoft.com/fwlink/?LinkID=532715

        }
    }
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
