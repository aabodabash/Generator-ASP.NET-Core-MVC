<#@ include file="..\..\Base\Templates\Include.tt" #><# var model = (SmartAppInfo)Model; #>
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using <#= model.Id #>.Backend.DataModels;

namespace <#= model.Id #>.Backend.Models
{
	public partial class ApplicationDbContext : IdentityDbContext<ApplicationUser>
	{
		public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
		{
		}

		protected override void OnModelCreating(ModelBuilder builder)
		{
			builder.Entity<IdentityUserLogin<string>>().HasKey(e => new { e.UserId });
            builder.Entity<IdentityUserRole<string>>().HasKey(e => new { e.RoleId });
            builder.Entity<IdentityUserToken<string>>().HasKey(e => new { e.UserId });
			<# if(model.DataModel != null && model.DataModel.Entities != null){ #>
				<# foreach(var entity in model.DataModel.Entities) {
					var primaryKey = entity.AllProperties()?.FirstOrDefault(p => p.IsKey);
					if(!entity.IsAbstract && !entity.IsEnum && primaryKey != null) { var lastKey = entity.AllProperties().Where(p=>p.IsKey).LastOrDefault(); #>
			builder.Entity<<#= entity.Id #>>().HasKey(e => new { <# foreach(var key in entity.AllProperties().Where(p=>p.IsKey)) {#> e.<#= key.Id#> <# if (!key.Equals(lastKey)) {#>,<#}#>  <# }#>});
			<# } 
			 } 
			}
			#>
		}


		protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
        }

<# if(model.DataModel != null && model.DataModel.Entities != null){ #>
		<# foreach(var entity in model.DataModel.Entities) {
		var key = entity.AllProperties()?.FirstOrDefault(p => p.IsKey);
		if(!entity.IsAbstract && !entity.IsEnum && key != null) { #>
		public DbSet<<#=entity.Id#>> <#=entity.Id#>s { get; set; }
		<# } 
		 } 
	    }
		#>
		
	}
}